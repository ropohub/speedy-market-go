// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "api/common/proto/offer.proto" (package "api.common.proto", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";

/**
 * @generated from protobuf enum api.common.proto.OfferType
 */
export enum OfferType {
    /**
     * @generated from protobuf enum value: OFFER_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: OFFER_TYPE_MULTI_BUY = 1;
     */
    MULTI_BUY = 1,
    /**
     * @generated from protobuf enum value: OFFER_TYPE_FLAT_DISCOUNT = 2;
     */
    FLAT_DISCOUNT = 2,
    /**
     * @generated from protobuf enum value: OFFER_TYPE_PERCENTAGE = 3;
     */
    PERCENTAGE = 3,
    /**
     * @generated from protobuf enum value: OFFER_TYPE_FIXED_PRICE = 4;
     */
    FIXED_PRICE = 4
}

/**
 * @generated from protobuf message api.common.proto.MultiBuyOffer
 */
export interface MultiBuyOffer {
    /**
     * @generated from protobuf field: int32 buyQuantity = 1;
     */
    buyQuantity: number;
    /**
     * @generated from protobuf field: int32 getQuantity = 2;
     */
    getQuantity: number;
}

/**
 * @generated from protobuf message api.common.proto.FlatDiscountOffer
 */
export interface FlatDiscountOffer {
    /**
     * @generated from protobuf field: double discountAmount = 1;
     */
    discountAmount: number;
}

/**
 * @generated from protobuf message api.common.proto.PercentageOffer
 */
export interface PercentageOffer {
    /**
     * @generated from protobuf field: double discountPercentage = 1;
     */
    discountPercentage: number;
}

/**
 * @generated from protobuf message api.common.proto.FixedPriceOffer
 */
export interface FixedPriceOffer {
    /**
     * @generated from protobuf field: double fixedPrice = 1;
     */
    fixedPrice: number;
}

/**
 * @generated from protobuf message api.common.proto.Offer
 */
export interface Offer {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: api.common.proto.OfferType offerType = 4;
     */
    offerType: OfferType;
    /**
     * @generated from protobuf oneof: offer_details
     */
    offerDetails: {
        oneofKind: "multiBuyOffer";
        multiBuyOffer: MultiBuyOffer;
    } | {
        oneofKind: "flatDiscountOffer";
        flatDiscountOffer: FlatDiscountOffer;
    } | {
        oneofKind: "percentageOffer";
        percentageOffer: PercentageOffer;
    } | {
        oneofKind: "fixedPriceOffer";
        fixedPriceOffer: FixedPriceOffer;
    } | {
        oneofKind: undefined;
    };
}

/**
 * @generated from protobuf message api.common.proto.MultiBuyOffer
 */
export interface MultiBuyOffer {
    /**
     * @generated from protobuf field: int32 buyQuantity = 1;
     */
    buyQuantity: number;
    /**
     * @generated from protobuf field: int32 getQuantity = 2;
     */
    getQuantity: number;
}

/**
 * @generated from protobuf message api.common.proto.FlatDiscountOffer
 */
export interface FlatDiscountOffer {
    /**
     * @generated from protobuf field: double discountAmount = 1;
     */
    discountAmount: number;
}

/**
 * @generated from protobuf message api.common.proto.PercentageOffer
 */
export interface PercentageOffer {
    /**
     * @generated from protobuf field: double discountPercentage = 1;
     */
    discountPercentage: number;
}

/**
 * @generated from protobuf message api.common.proto.FixedPriceOffer
 */
export interface FixedPriceOffer {
    /**
     * @generated from protobuf field: double fixedPrice = 1;
     */
    fixedPrice: number;
}

/**
 * @generated from protobuf message api.common.proto.Offer
 */
export interface Offer {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: api.common.proto.OfferType offerType = 4;
     */
    offerType: OfferType;
    /**
     * @generated from protobuf oneof: offer_details
     */
    offerDetails: {
        oneofKind: "multiBuyOffer";
        multiBuyOffer: MultiBuyOffer;
    } | {
        oneofKind: "flatDiscountOffer";
        flatDiscountOffer: FlatDiscountOffer;
    } | {
        oneofKind: "percentageOffer";
        percentageOffer: PercentageOffer;
    } | {
        oneofKind: "fixedPriceOffer";
        fixedPriceOffer: FixedPriceOffer;
    } | {
        oneofKind: undefined;
    };
}

/**
 * Type for protobuf message api.common.proto.MultiBuyOffer
 */
export const MultiBuyOffer = new class MultiBuyOffer$Type extends MessageType<MultiBuyOffer> {
    constructor() {
        super("api.common.proto.MultiBuyOffer", [
            { no: 1, name: "buyQuantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
            { no: 2, name: "getQuantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ }
        ]);
    }
    create(value?: PartialMessage<MultiBuyOffer>): MultiBuyOffer {
        const message = { buyQuantity: 0, getQuantity: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultiBuyOffer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultiBuyOffer): MultiBuyOffer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 buyQuantity */ 1:
                    message.buyQuantity = reader.int32();
                    break;
                case /* int32 getQuantity */ 2:
                    message.getQuantity = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultiBuyOffer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 buyQuantity = 1; */
        if (message.buyQuantity !== 0)
            writer.tag(1, WireType.Varint).int32(message.buyQuantity);
        /* int32 getQuantity = 2; */
        if (message.getQuantity !== 0)
            writer.tag(2, WireType.Varint).int32(message.getQuantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}();

/**
 * Type for protobuf message api.common.proto.FlatDiscountOffer
 */
export const FlatDiscountOffer = new class FlatDiscountOffer$Type extends MessageType<FlatDiscountOffer> {
    constructor() {
        super("api.common.proto.FlatDiscountOffer", [
            { no: 1, name: "discountAmount", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ }
        ]);
    }
    create(value?: PartialMessage<FlatDiscountOffer>): FlatDiscountOffer {
        const message = { discountAmount: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FlatDiscountOffer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FlatDiscountOffer): FlatDiscountOffer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double discountAmount */ 1:
                    message.discountAmount = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FlatDiscountOffer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double discountAmount = 1; */
        if (message.discountAmount !== 0)
            writer.tag(1, WireType.Fixed64).double(message.discountAmount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}();

/**
 * Type for protobuf message api.common.proto.PercentageOffer
 */
export const PercentageOffer = new class PercentageOffer$Type extends MessageType<PercentageOffer> {
    constructor() {
        super("api.common.proto.PercentageOffer", [
            { no: 1, name: "discountPercentage", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ }
        ]);
    }
    create(value?: PartialMessage<PercentageOffer>): PercentageOffer {
        const message = { discountPercentage: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PercentageOffer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PercentageOffer): PercentageOffer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double discountPercentage */ 1:
                    message.discountPercentage = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PercentageOffer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double discountPercentage = 1; */
        if (message.discountPercentage !== 0)
            writer.tag(1, WireType.Fixed64).double(message.discountPercentage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}();

/**
 * Type for protobuf message api.common.proto.FixedPriceOffer
 */
export const FixedPriceOffer = new class FixedPriceOffer$Type extends MessageType<FixedPriceOffer> {
    constructor() {
        super("api.common.proto.FixedPriceOffer", [
            { no: 1, name: "fixedPrice", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ }
        ]);
    }
    create(value?: PartialMessage<FixedPriceOffer>): FixedPriceOffer {
        const message = { fixedPrice: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FixedPriceOffer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FixedPriceOffer): FixedPriceOffer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double fixedPrice */ 1:
                    message.fixedPrice = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FixedPriceOffer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double fixedPrice = 1; */
        if (message.fixedPrice !== 0)
            writer.tag(1, WireType.Fixed64).double(message.fixedPrice);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}();

/**
 * @generated MessageType for protobuf message api.common.proto.Offer
 */
export const Offer = new class Offer$Type extends MessageType<Offer> {
    constructor() {
        super("api.common.proto.Offer", [
            { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
            { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
            { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
            { no: 4, name: "offerType", kind: "enum", T: () => ["api.common.proto.OfferType", OfferType, "OFFER_TYPE_"] },
            { no: 5, name: "multiBuyOffer", kind: "message", oneof: "offerDetails", T: () => MultiBuyOffer },
            { no: 6, name: "flatDiscountOffer", kind: "message", oneof: "offerDetails", T: () => FlatDiscountOffer },
            { no: 7, name: "percentageOffer", kind: "message", oneof: "offerDetails", T: () => PercentageOffer },
            { no: 8, name: "fixedPriceOffer", kind: "message", oneof: "offerDetails", T: () => FixedPriceOffer }
        ]);
    }
    create(value?: PartialMessage<Offer>): Offer {
        const message = { id: "", name: "", description: "", offerType: 0, offerDetails: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Offer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Offer): Offer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* api.common.proto.OfferType offerType */ 4:
                    message.offerType = reader.int32();
                    break;
                case /* api.common.proto.MultiBuyOffer multiBuyOffer */ 5:
                    message.offerDetails = {
                        oneofKind: "multiBuyOffer",
                        multiBuyOffer: MultiBuyOffer.internalBinaryRead(reader, reader.uint32(), options, (message.offerDetails as any).multiBuyOffer)
                    };
                    break;
                case /* api.common.proto.FlatDiscountOffer flatDiscountOffer */ 6:
                    message.offerDetails = {
                        oneofKind: "flatDiscountOffer",
                        flatDiscountOffer: FlatDiscountOffer.internalBinaryRead(reader, reader.uint32(), options, (message.offerDetails as any).flatDiscountOffer)
                    };
                    break;
                case /* api.common.proto.PercentageOffer percentageOffer */ 7:
                    message.offerDetails = {
                        oneofKind: "percentageOffer",
                        percentageOffer: PercentageOffer.internalBinaryRead(reader, reader.uint32(), options, (message.offerDetails as any).percentageOffer)
                    };
                    break;
                case /* api.common.proto.FixedPriceOffer fixedPriceOffer */ 8:
                    message.offerDetails = {
                        oneofKind: "fixedPriceOffer",
                        fixedPriceOffer: FixedPriceOffer.internalBinaryRead(reader, reader.uint32(), options, (message.offerDetails as any).fixedPriceOffer)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Offer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* api.common.proto.OfferType offerType = 4; */
        if (message.offerType !== 0)
            writer.tag(4, WireType.Varint).int32(message.offerType);
        /* api.common.proto.MultiBuyOffer multiBuyOffer = 5; */
        if (message.offerDetails.oneofKind === "multiBuyOffer")
            MultiBuyOffer.internalBinaryWrite(message.offerDetails.multiBuyOffer, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* api.common.proto.FlatDiscountOffer flatDiscountOffer = 6; */
        if (message.offerDetails.oneofKind === "flatDiscountOffer")
            FlatDiscountOffer.internalBinaryWrite(message.offerDetails.flatDiscountOffer, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* api.common.proto.PercentageOffer percentageOffer = 7; */
        if (message.offerDetails.oneofKind === "percentageOffer")
            PercentageOffer.internalBinaryWrite(message.offerDetails.percentageOffer, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* api.common.proto.FixedPriceOffer fixedPriceOffer = 8; */
        if (message.offerDetails.oneofKind === "fixedPriceOffer")
            FixedPriceOffer.internalBinaryWrite(message.offerDetails.fixedPriceOffer, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}();
