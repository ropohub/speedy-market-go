// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "api/common/proto/address.proto" (package "api.common.proto", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message api.common.proto.Address
 */
export interface Address {
    /**
     * The full textual address of the store (e.g., "288, Sector-38 Gurgaon,
     * Haryana, India").
     *
     * @generated from protobuf field: string full_address = 1
     */
    fullAddress: string;
    /**
     * The latitude of the store's location (in decimal degrees).
     *
     * @generated from protobuf field: double latitude = 2
     */
    latitude: number;
    /**
     * The longitude of the store's location (in decimal degrees).
     *
     * @generated from protobuf field: double longitude = 3
     */
    longitude: number;
    /**
     * Optional: The postal/ZIP code of the store.
     *
     * @generated from protobuf field: string postal_code = 4
     */
    postalCode: string;
    /**
     * Optional: The city or locality of the store.
     *
     * @generated from protobuf field: string city = 5
     */
    city: string;
    /**
     * Optional: The state or region of the store.
     *
     * @generated from protobuf field: string state = 6
     */
    state: string;
    /**
     * Optional: The country of the store.
     *
     * @generated from protobuf field: string country = 7
     */
    country: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Address$Type extends MessageType<Address> {
    constructor() {
        super("api.common.proto.Address", [
            { no: 1, name: "full_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "latitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "longitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "postal_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "country", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Address>): Address {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fullAddress = "";
        message.latitude = 0;
        message.longitude = 0;
        message.postalCode = "";
        message.city = "";
        message.state = "";
        message.country = "";
        if (value !== undefined)
            reflectionMergePartial<Address>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Address): Address {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string full_address */ 1:
                    message.fullAddress = reader.string();
                    break;
                case /* double latitude */ 2:
                    message.latitude = reader.double();
                    break;
                case /* double longitude */ 3:
                    message.longitude = reader.double();
                    break;
                case /* string postal_code */ 4:
                    message.postalCode = reader.string();
                    break;
                case /* string city */ 5:
                    message.city = reader.string();
                    break;
                case /* string state */ 6:
                    message.state = reader.string();
                    break;
                case /* string country */ 7:
                    message.country = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Address, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string full_address = 1; */
        if (message.fullAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fullAddress);
        /* double latitude = 2; */
        if (message.latitude !== 0)
            writer.tag(2, WireType.Bit64).double(message.latitude);
        /* double longitude = 3; */
        if (message.longitude !== 0)
            writer.tag(3, WireType.Bit64).double(message.longitude);
        /* string postal_code = 4; */
        if (message.postalCode !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.postalCode);
        /* string city = 5; */
        if (message.city !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.city);
        /* string state = 6; */
        if (message.state !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.state);
        /* string country = 7; */
        if (message.country !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.country);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.Address
 */
export const Address = new Address$Type();
