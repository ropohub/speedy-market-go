// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "api/common/proto/product.proto" (package "api.common.proto", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Store } from "./store";
import { Offer } from "./offer";
/**
 * Product represents a product with various attributes.
 *
 * @generated from protobuf message api.common.proto.Product
 */
export interface Product {
    /**
     * primary_key is the primary key of the product.
     *
     * @generated from protobuf field: api.common.proto.Product.PrimaryKey primary_key = 1
     */
    primaryKey?: Product_PrimaryKey;
    /**
     * brand_id is the ID of the brand.
     *
     * @generated from protobuf field: int64 brand_id = 2
     */
    brandId: bigint;
    /**
     * @generated from protobuf field: string brand_name = 3
     */
    brandName: string;
    /**
     * @generated from protobuf field: api.common.proto.ProductVariantWithStore min_discounted_price_product_variant = 4
     */
    minDiscountedPriceProductVariant?: ProductVariantWithStore;
    /**
     * offers is a list of offers associated with the product.
     *
     * @generated from protobuf field: repeated api.common.proto.Offer offers = 5
     */
    offers: Offer[];
}
/**
 * PrimaryKey represents the primary key of the product.
 *
 * @generated from protobuf message api.common.proto.Product.PrimaryKey
 */
export interface Product_PrimaryKey {
    /**
     * product_id is the ID of the product.
     *
     * @generated from protobuf field: int64 product_id = 1
     */
    productId: bigint;
}
/**
 * @generated from protobuf message api.common.proto.ProductVariant
 */
export interface ProductVariant {
    /**
     * @generated from protobuf field: int64 product_variant_id = 1
     */
    productVariantId: bigint;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 3
     */
    description: string;
    /**
     * @generated from protobuf field: string image_url = 4
     */
    imageUrl: string;
    /**
     * @generated from protobuf field: int64 color_id = 5
     */
    colorId: bigint;
    /**
     * @generated from protobuf field: string color_name = 6
     */
    colorName: string;
    /**
     * @generated from protobuf field: int64 size_id = 7
     */
    sizeId: bigint;
    /**
     * @generated from protobuf field: string size_name = 8
     */
    sizeName: string;
    /**
     * @generated from protobuf field: int64 mrp_micros = 9
     */
    mrpMicros: bigint;
}
/**
 * @generated from protobuf message api.common.proto.ProductVariantWithStore
 */
export interface ProductVariantWithStore {
    /**
     * @generated from protobuf field: api.common.proto.ProductVariant product_variant = 1
     */
    productVariant?: ProductVariant;
    /**
     * @generated from protobuf field: api.common.proto.Store store_with_best_price = 2
     */
    storeWithBestPrice?: Store;
    /**
     * @generated from protobuf field: int64 discounted_price_micros = 3
     */
    discountedPriceMicros: bigint;
}
/**
 * @generated from protobuf message api.common.proto.ProductDetails
 */
export interface ProductDetails {
    /**
     * @generated from protobuf field: int64 product_id = 1
     */
    productId: bigint;
    /**
     * @generated from protobuf field: int64 brand_id = 2
     */
    brandId: bigint;
    /**
     * @generated from protobuf field: string brand_name = 3
     */
    brandName: string;
    /**
     * @generated from protobuf field: repeated api.common.proto.Color colors = 4
     */
    colors: Color[];
}
/**
 * @generated from protobuf message api.common.proto.Color
 */
export interface Color {
    /**
     * @generated from protobuf field: int64 color_id = 1
     */
    colorId: bigint;
    /**
     * @generated from protobuf field: string color_name = 2
     */
    colorName: string;
    /**
     * @generated from protobuf field: repeated string product_image_urls = 3
     */
    productImageUrls: string[];
    /**
     * @generated from protobuf field: repeated api.common.proto.Size sizes = 4
     */
    sizes: Size[];
}
/**
 * @generated from protobuf message api.common.proto.Size
 */
export interface Size {
    /**
     * @generated from protobuf field: int64 size_id = 1
     */
    sizeId: bigint;
    /**
     * @generated from protobuf field: string size_name = 2
     */
    sizeName: string;
    /**
     * @generated from protobuf field: int64 product_variant_id = 3
     */
    productVariantId: bigint;
    /**
     * @generated from protobuf field: string product_variant_name = 4
     */
    productVariantName: string;
    /**
     * @generated from protobuf field: string product_variant_description = 5
     */
    productVariantDescription: string;
    /**
     * @generated from protobuf field: int64 mrp_micros = 6
     */
    mrpMicros: bigint;
    /**
     * @generated from protobuf field: api.common.proto.Store store_with_best_price = 7
     */
    storeWithBestPrice?: Store;
    /**
     * @generated from protobuf field: int64 discounted_price_mircos = 8
     */
    discountedPriceMircos: bigint;
    /**
     * @generated from protobuf field: int64 quantity = 9
     */
    quantity: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class Product$Type extends MessageType<Product> {
    constructor() {
        super("api.common.proto.Product", [
            { no: 1, name: "primary_key", kind: "message", T: () => Product_PrimaryKey },
            { no: 2, name: "brand_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "brand_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "min_discounted_price_product_variant", kind: "message", T: () => ProductVariantWithStore },
            { no: 5, name: "offers", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Offer }
        ]);
    }
    create(value?: PartialMessage<Product>): Product {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brandId = 0n;
        message.brandName = "";
        message.offers = [];
        if (value !== undefined)
            reflectionMergePartial<Product>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Product): Product {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.common.proto.Product.PrimaryKey primary_key */ 1:
                    message.primaryKey = Product_PrimaryKey.internalBinaryRead(reader, reader.uint32(), options, message.primaryKey);
                    break;
                case /* int64 brand_id */ 2:
                    message.brandId = reader.int64().toBigInt();
                    break;
                case /* string brand_name */ 3:
                    message.brandName = reader.string();
                    break;
                case /* api.common.proto.ProductVariantWithStore min_discounted_price_product_variant */ 4:
                    message.minDiscountedPriceProductVariant = ProductVariantWithStore.internalBinaryRead(reader, reader.uint32(), options, message.minDiscountedPriceProductVariant);
                    break;
                case /* repeated api.common.proto.Offer offers */ 5:
                    message.offers.push(Offer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Product, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.common.proto.Product.PrimaryKey primary_key = 1; */
        if (message.primaryKey)
            Product_PrimaryKey.internalBinaryWrite(message.primaryKey, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 brand_id = 2; */
        if (message.brandId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.brandId);
        /* string brand_name = 3; */
        if (message.brandName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.brandName);
        /* api.common.proto.ProductVariantWithStore min_discounted_price_product_variant = 4; */
        if (message.minDiscountedPriceProductVariant)
            ProductVariantWithStore.internalBinaryWrite(message.minDiscountedPriceProductVariant, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated api.common.proto.Offer offers = 5; */
        for (let i = 0; i < message.offers.length; i++)
            Offer.internalBinaryWrite(message.offers[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.Product
 */
export const Product = new Product$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Product_PrimaryKey$Type extends MessageType<Product_PrimaryKey> {
    constructor() {
        super("api.common.proto.Product.PrimaryKey", [
            { no: 1, name: "product_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Product_PrimaryKey>): Product_PrimaryKey {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.productId = 0n;
        if (value !== undefined)
            reflectionMergePartial<Product_PrimaryKey>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Product_PrimaryKey): Product_PrimaryKey {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 product_id */ 1:
                    message.productId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Product_PrimaryKey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 product_id = 1; */
        if (message.productId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.productId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.Product.PrimaryKey
 */
export const Product_PrimaryKey = new Product_PrimaryKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProductVariant$Type extends MessageType<ProductVariant> {
    constructor() {
        super("api.common.proto.ProductVariant", [
            { no: 1, name: "product_variant_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "image_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "color_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "color_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "size_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "size_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "mrp_micros", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ProductVariant>): ProductVariant {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.productVariantId = 0n;
        message.name = "";
        message.description = "";
        message.imageUrl = "";
        message.colorId = 0n;
        message.colorName = "";
        message.sizeId = 0n;
        message.sizeName = "";
        message.mrpMicros = 0n;
        if (value !== undefined)
            reflectionMergePartial<ProductVariant>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProductVariant): ProductVariant {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 product_variant_id */ 1:
                    message.productVariantId = reader.int64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* string image_url */ 4:
                    message.imageUrl = reader.string();
                    break;
                case /* int64 color_id */ 5:
                    message.colorId = reader.int64().toBigInt();
                    break;
                case /* string color_name */ 6:
                    message.colorName = reader.string();
                    break;
                case /* int64 size_id */ 7:
                    message.sizeId = reader.int64().toBigInt();
                    break;
                case /* string size_name */ 8:
                    message.sizeName = reader.string();
                    break;
                case /* int64 mrp_micros */ 9:
                    message.mrpMicros = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProductVariant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 product_variant_id = 1; */
        if (message.productVariantId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.productVariantId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* string image_url = 4; */
        if (message.imageUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.imageUrl);
        /* int64 color_id = 5; */
        if (message.colorId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.colorId);
        /* string color_name = 6; */
        if (message.colorName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.colorName);
        /* int64 size_id = 7; */
        if (message.sizeId !== 0n)
            writer.tag(7, WireType.Varint).int64(message.sizeId);
        /* string size_name = 8; */
        if (message.sizeName !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.sizeName);
        /* int64 mrp_micros = 9; */
        if (message.mrpMicros !== 0n)
            writer.tag(9, WireType.Varint).int64(message.mrpMicros);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.ProductVariant
 */
export const ProductVariant = new ProductVariant$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProductVariantWithStore$Type extends MessageType<ProductVariantWithStore> {
    constructor() {
        super("api.common.proto.ProductVariantWithStore", [
            { no: 1, name: "product_variant", kind: "message", T: () => ProductVariant },
            { no: 2, name: "store_with_best_price", kind: "message", T: () => Store },
            { no: 3, name: "discounted_price_micros", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ProductVariantWithStore>): ProductVariantWithStore {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.discountedPriceMicros = 0n;
        if (value !== undefined)
            reflectionMergePartial<ProductVariantWithStore>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProductVariantWithStore): ProductVariantWithStore {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.common.proto.ProductVariant product_variant */ 1:
                    message.productVariant = ProductVariant.internalBinaryRead(reader, reader.uint32(), options, message.productVariant);
                    break;
                case /* api.common.proto.Store store_with_best_price */ 2:
                    message.storeWithBestPrice = Store.internalBinaryRead(reader, reader.uint32(), options, message.storeWithBestPrice);
                    break;
                case /* int64 discounted_price_micros */ 3:
                    message.discountedPriceMicros = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProductVariantWithStore, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.common.proto.ProductVariant product_variant = 1; */
        if (message.productVariant)
            ProductVariant.internalBinaryWrite(message.productVariant, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* api.common.proto.Store store_with_best_price = 2; */
        if (message.storeWithBestPrice)
            Store.internalBinaryWrite(message.storeWithBestPrice, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 discounted_price_micros = 3; */
        if (message.discountedPriceMicros !== 0n)
            writer.tag(3, WireType.Varint).int64(message.discountedPriceMicros);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.ProductVariantWithStore
 */
export const ProductVariantWithStore = new ProductVariantWithStore$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProductDetails$Type extends MessageType<ProductDetails> {
    constructor() {
        super("api.common.proto.ProductDetails", [
            { no: 1, name: "product_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "brand_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "brand_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "colors", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Color }
        ]);
    }
    create(value?: PartialMessage<ProductDetails>): ProductDetails {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.productId = 0n;
        message.brandId = 0n;
        message.brandName = "";
        message.colors = [];
        if (value !== undefined)
            reflectionMergePartial<ProductDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProductDetails): ProductDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 product_id */ 1:
                    message.productId = reader.int64().toBigInt();
                    break;
                case /* int64 brand_id */ 2:
                    message.brandId = reader.int64().toBigInt();
                    break;
                case /* string brand_name */ 3:
                    message.brandName = reader.string();
                    break;
                case /* repeated api.common.proto.Color colors */ 4:
                    message.colors.push(Color.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProductDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 product_id = 1; */
        if (message.productId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.productId);
        /* int64 brand_id = 2; */
        if (message.brandId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.brandId);
        /* string brand_name = 3; */
        if (message.brandName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.brandName);
        /* repeated api.common.proto.Color colors = 4; */
        for (let i = 0; i < message.colors.length; i++)
            Color.internalBinaryWrite(message.colors[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.ProductDetails
 */
export const ProductDetails = new ProductDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Color$Type extends MessageType<Color> {
    constructor() {
        super("api.common.proto.Color", [
            { no: 1, name: "color_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "color_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "product_image_urls", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "sizes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Size }
        ]);
    }
    create(value?: PartialMessage<Color>): Color {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.colorId = 0n;
        message.colorName = "";
        message.productImageUrls = [];
        message.sizes = [];
        if (value !== undefined)
            reflectionMergePartial<Color>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Color): Color {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 color_id */ 1:
                    message.colorId = reader.int64().toBigInt();
                    break;
                case /* string color_name */ 2:
                    message.colorName = reader.string();
                    break;
                case /* repeated string product_image_urls */ 3:
                    message.productImageUrls.push(reader.string());
                    break;
                case /* repeated api.common.proto.Size sizes */ 4:
                    message.sizes.push(Size.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Color, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 color_id = 1; */
        if (message.colorId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.colorId);
        /* string color_name = 2; */
        if (message.colorName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.colorName);
        /* repeated string product_image_urls = 3; */
        for (let i = 0; i < message.productImageUrls.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.productImageUrls[i]);
        /* repeated api.common.proto.Size sizes = 4; */
        for (let i = 0; i < message.sizes.length; i++)
            Size.internalBinaryWrite(message.sizes[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.Color
 */
export const Color = new Color$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Size$Type extends MessageType<Size> {
    constructor() {
        super("api.common.proto.Size", [
            { no: 1, name: "size_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "size_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "product_variant_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "product_variant_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "product_variant_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "mrp_micros", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "store_with_best_price", kind: "message", T: () => Store },
            { no: 8, name: "discounted_price_mircos", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "quantity", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Size>): Size {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sizeId = 0n;
        message.sizeName = "";
        message.productVariantId = 0n;
        message.productVariantName = "";
        message.productVariantDescription = "";
        message.mrpMicros = 0n;
        message.discountedPriceMircos = 0n;
        message.quantity = 0n;
        if (value !== undefined)
            reflectionMergePartial<Size>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Size): Size {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 size_id */ 1:
                    message.sizeId = reader.int64().toBigInt();
                    break;
                case /* string size_name */ 2:
                    message.sizeName = reader.string();
                    break;
                case /* int64 product_variant_id */ 3:
                    message.productVariantId = reader.int64().toBigInt();
                    break;
                case /* string product_variant_name */ 4:
                    message.productVariantName = reader.string();
                    break;
                case /* string product_variant_description */ 5:
                    message.productVariantDescription = reader.string();
                    break;
                case /* int64 mrp_micros */ 6:
                    message.mrpMicros = reader.int64().toBigInt();
                    break;
                case /* api.common.proto.Store store_with_best_price */ 7:
                    message.storeWithBestPrice = Store.internalBinaryRead(reader, reader.uint32(), options, message.storeWithBestPrice);
                    break;
                case /* int64 discounted_price_mircos */ 8:
                    message.discountedPriceMircos = reader.int64().toBigInt();
                    break;
                case /* int64 quantity */ 9:
                    message.quantity = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Size, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 size_id = 1; */
        if (message.sizeId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.sizeId);
        /* string size_name = 2; */
        if (message.sizeName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sizeName);
        /* int64 product_variant_id = 3; */
        if (message.productVariantId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.productVariantId);
        /* string product_variant_name = 4; */
        if (message.productVariantName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.productVariantName);
        /* string product_variant_description = 5; */
        if (message.productVariantDescription !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.productVariantDescription);
        /* int64 mrp_micros = 6; */
        if (message.mrpMicros !== 0n)
            writer.tag(6, WireType.Varint).int64(message.mrpMicros);
        /* api.common.proto.Store store_with_best_price = 7; */
        if (message.storeWithBestPrice)
            Store.internalBinaryWrite(message.storeWithBestPrice, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int64 discounted_price_mircos = 8; */
        if (message.discountedPriceMircos !== 0n)
            writer.tag(8, WireType.Varint).int64(message.discountedPriceMircos);
        /* int64 quantity = 9; */
        if (message.quantity !== 0n)
            writer.tag(9, WireType.Varint).int64(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.Size
 */
export const Size = new Size$Type();
