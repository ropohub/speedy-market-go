// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "api/common/proto/category.proto" (package "api.common.proto", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * From frontend we only support 3 levels of categories.
 *
 * @generated from protobuf message api.common.proto.Category
 */
export interface Category {
    /**
     * @generated from protobuf field: int64 category_id = 1
     */
    categoryId: bigint;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: string image_url = 3
     */
    imageUrl: string;
    /**
     * @generated from protobuf field: repeated api.common.proto.Category subcategories = 4
     */
    subcategories: Category[];
}
/**
 * @generated from protobuf message api.common.proto.CategorySet
 */
export interface CategorySet {
    /**
     * @generated from protobuf field: repeated api.common.proto.Category categories = 1
     */
    categories: Category[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Category$Type extends MessageType<Category> {
    constructor() {
        super("api.common.proto.Category", [
            { no: 1, name: "category_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "image_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "subcategories", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Category }
        ]);
    }
    create(value?: PartialMessage<Category>): Category {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.categoryId = 0n;
        message.name = "";
        message.imageUrl = "";
        message.subcategories = [];
        if (value !== undefined)
            reflectionMergePartial<Category>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Category): Category {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 category_id */ 1:
                    message.categoryId = reader.int64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string image_url */ 3:
                    message.imageUrl = reader.string();
                    break;
                case /* repeated api.common.proto.Category subcategories */ 4:
                    message.subcategories.push(Category.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Category, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 category_id = 1; */
        if (message.categoryId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.categoryId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string image_url = 3; */
        if (message.imageUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.imageUrl);
        /* repeated api.common.proto.Category subcategories = 4; */
        for (let i = 0; i < message.subcategories.length; i++)
            Category.internalBinaryWrite(message.subcategories[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.Category
 */
export const Category = new Category$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CategorySet$Type extends MessageType<CategorySet> {
    constructor() {
        super("api.common.proto.CategorySet", [
            { no: 1, name: "categories", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Category }
        ]);
    }
    create(value?: PartialMessage<CategorySet>): CategorySet {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.categories = [];
        if (value !== undefined)
            reflectionMergePartial<CategorySet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CategorySet): CategorySet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated api.common.proto.Category categories */ 1:
                    message.categories.push(Category.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CategorySet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated api.common.proto.Category categories = 1; */
        for (let i = 0; i < message.categories.length; i++)
            Category.internalBinaryWrite(message.categories[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.CategorySet
 */
export const CategorySet = new CategorySet$Type();
