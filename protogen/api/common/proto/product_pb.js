// source: api/common/proto/product.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.exportSymbol('proto.api.common.proto.Color', null, global);
goog.exportSymbol('proto.api.common.proto.Product', null, global);
goog.exportSymbol('proto.api.common.proto.Product.PrimaryKey', null, global);
goog.exportSymbol('proto.api.common.proto.ProductDetails', null, global);
goog.exportSymbol('proto.api.common.proto.ProductVariant', null, global);
goog.exportSymbol('proto.api.common.proto.ProductVariantWithStore', null, global);
goog.exportSymbol('proto.api.common.proto.Size', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.common.proto.Product = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.common.proto.Product.repeatedFields_, null);
};
goog.inherits(proto.api.common.proto.Product, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.common.proto.Product.displayName = 'proto.api.common.proto.Product';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.common.proto.Product.PrimaryKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.common.proto.Product.PrimaryKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.common.proto.Product.PrimaryKey.displayName = 'proto.api.common.proto.Product.PrimaryKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.common.proto.ProductVariant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.common.proto.ProductVariant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.common.proto.ProductVariant.displayName = 'proto.api.common.proto.ProductVariant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.common.proto.ProductVariantWithStore = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.common.proto.ProductVariantWithStore, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.common.proto.ProductVariantWithStore.displayName = 'proto.api.common.proto.ProductVariantWithStore';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.common.proto.ProductDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.common.proto.ProductDetails.repeatedFields_, null);
};
goog.inherits(proto.api.common.proto.ProductDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.common.proto.ProductDetails.displayName = 'proto.api.common.proto.ProductDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.common.proto.Color = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.common.proto.Color.repeatedFields_, null);
};
goog.inherits(proto.api.common.proto.Color, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.common.proto.Color.displayName = 'proto.api.common.proto.Color';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.common.proto.Size = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.common.proto.Size, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.common.proto.Size.displayName = 'proto.api.common.proto.Size';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.common.proto.Product.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.common.proto.Product.prototype.toObject = function(opt_includeInstance) {
  return proto.api.common.proto.Product.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.common.proto.Product} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.common.proto.Product.toObject = function(includeInstance, msg) {
  var f, obj = {
primaryKey: (f = msg.getPrimaryKey()) && proto.api.common.proto.Product.PrimaryKey.toObject(includeInstance, f),
brandId: jspb.Message.getFieldWithDefault(msg, 2, 0),
brandName: jspb.Message.getFieldWithDefault(msg, 3, ""),
minDiscountedPriceProductVariant: (f = msg.getMinDiscountedPriceProductVariant()) && proto.api.common.proto.ProductVariantWithStore.toObject(includeInstance, f),
offersList: jspb.Message.toObjectList(msg.getOffersList(),
    proto.api.common.proto.Offer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.common.proto.Product}
 */
proto.api.common.proto.Product.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.common.proto.Product;
  return proto.api.common.proto.Product.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.common.proto.Product} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.common.proto.Product}
 */
proto.api.common.proto.Product.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.common.proto.Product.PrimaryKey;
      reader.readMessage(value,proto.api.common.proto.Product.PrimaryKey.deserializeBinaryFromReader);
      msg.setPrimaryKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBrandId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrandName(value);
      break;
    case 4:
      var value = new proto.api.common.proto.ProductVariantWithStore;
      reader.readMessage(value,proto.api.common.proto.ProductVariantWithStore.deserializeBinaryFromReader);
      msg.setMinDiscountedPriceProductVariant(value);
      break;
    case 5:
      var value = new proto.api.common.proto.Offer;
      reader.readMessage(value,proto.api.common.proto.Offer.deserializeBinaryFromReader);
      msg.addOffers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.common.proto.Product.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.common.proto.Product.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.common.proto.Product} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.common.proto.Product.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrimaryKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.common.proto.Product.PrimaryKey.serializeBinaryToWriter
    );
  }
  f = message.getBrandId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getBrandName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMinDiscountedPriceProductVariant();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.common.proto.ProductVariantWithStore.serializeBinaryToWriter
    );
  }
  f = message.getOffersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.api.common.proto.Offer.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.common.proto.Product.PrimaryKey.prototype.toObject = function(opt_includeInstance) {
  return proto.api.common.proto.Product.PrimaryKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.common.proto.Product.PrimaryKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.common.proto.Product.PrimaryKey.toObject = function(includeInstance, msg) {
  var f, obj = {
productId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.common.proto.Product.PrimaryKey}
 */
proto.api.common.proto.Product.PrimaryKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.common.proto.Product.PrimaryKey;
  return proto.api.common.proto.Product.PrimaryKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.common.proto.Product.PrimaryKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.common.proto.Product.PrimaryKey}
 */
proto.api.common.proto.Product.PrimaryKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setProductId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.common.proto.Product.PrimaryKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.common.proto.Product.PrimaryKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.common.proto.Product.PrimaryKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.common.proto.Product.PrimaryKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 product_id = 1;
 * @return {number}
 */
proto.api.common.proto.Product.PrimaryKey.prototype.getProductId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.common.proto.Product.PrimaryKey} returns this
 */
proto.api.common.proto.Product.PrimaryKey.prototype.setProductId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PrimaryKey primary_key = 1;
 * @return {?proto.api.common.proto.Product.PrimaryKey}
 */
proto.api.common.proto.Product.prototype.getPrimaryKey = function() {
  return /** @type{?proto.api.common.proto.Product.PrimaryKey} */ (
    jspb.Message.getWrapperField(this, proto.api.common.proto.Product.PrimaryKey, 1));
};


/**
 * @param {?proto.api.common.proto.Product.PrimaryKey|undefined} value
 * @return {!proto.api.common.proto.Product} returns this
*/
proto.api.common.proto.Product.prototype.setPrimaryKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.common.proto.Product} returns this
 */
proto.api.common.proto.Product.prototype.clearPrimaryKey = function() {
  return this.setPrimaryKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.common.proto.Product.prototype.hasPrimaryKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 brand_id = 2;
 * @return {number}
 */
proto.api.common.proto.Product.prototype.getBrandId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.common.proto.Product} returns this
 */
proto.api.common.proto.Product.prototype.setBrandId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string brand_name = 3;
 * @return {string}
 */
proto.api.common.proto.Product.prototype.getBrandName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.common.proto.Product} returns this
 */
proto.api.common.proto.Product.prototype.setBrandName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional ProductVariantWithStore min_discounted_price_product_variant = 4;
 * @return {?proto.api.common.proto.ProductVariantWithStore}
 */
proto.api.common.proto.Product.prototype.getMinDiscountedPriceProductVariant = function() {
  return /** @type{?proto.api.common.proto.ProductVariantWithStore} */ (
    jspb.Message.getWrapperField(this, proto.api.common.proto.ProductVariantWithStore, 4));
};


/**
 * @param {?proto.api.common.proto.ProductVariantWithStore|undefined} value
 * @return {!proto.api.common.proto.Product} returns this
*/
proto.api.common.proto.Product.prototype.setMinDiscountedPriceProductVariant = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.common.proto.Product} returns this
 */
proto.api.common.proto.Product.prototype.clearMinDiscountedPriceProductVariant = function() {
  return this.setMinDiscountedPriceProductVariant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.common.proto.Product.prototype.hasMinDiscountedPriceProductVariant = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Offer offers = 5;
 * @return {!Array<!proto.api.common.proto.Offer>}
 */
proto.api.common.proto.Product.prototype.getOffersList = function() {
  return /** @type{!Array<!proto.api.common.proto.Offer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.common.proto.Offer, 5));
};


/**
 * @param {!Array<!proto.api.common.proto.Offer>} value
 * @return {!proto.api.common.proto.Product} returns this
*/
proto.api.common.proto.Product.prototype.setOffersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.api.common.proto.Offer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.common.proto.Offer}
 */
proto.api.common.proto.Product.prototype.addOffers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.api.common.proto.Offer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.common.proto.Product} returns this
 */
proto.api.common.proto.Product.prototype.clearOffersList = function() {
  return this.setOffersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.common.proto.ProductVariant.prototype.toObject = function(opt_includeInstance) {
  return proto.api.common.proto.ProductVariant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.common.proto.ProductVariant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.common.proto.ProductVariant.toObject = function(includeInstance, msg) {
  var f, obj = {
productVariantId: jspb.Message.getFieldWithDefault(msg, 1, 0),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
description: jspb.Message.getFieldWithDefault(msg, 3, ""),
imageUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
colorId: jspb.Message.getFieldWithDefault(msg, 5, 0),
colorName: jspb.Message.getFieldWithDefault(msg, 6, ""),
sizeId: jspb.Message.getFieldWithDefault(msg, 7, 0),
sizeName: jspb.Message.getFieldWithDefault(msg, 8, ""),
mrpMicros: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.common.proto.ProductVariant}
 */
proto.api.common.proto.ProductVariant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.common.proto.ProductVariant;
  return proto.api.common.proto.ProductVariant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.common.proto.ProductVariant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.common.proto.ProductVariant}
 */
proto.api.common.proto.ProductVariant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setProductVariantId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageUrl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setColorId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setColorName(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSizeId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSizeName(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMrpMicros(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.common.proto.ProductVariant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.common.proto.ProductVariant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.common.proto.ProductVariant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.common.proto.ProductVariant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductVariantId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getImageUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getColorId();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getColorName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSizeId();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getSizeName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMrpMicros();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
};


/**
 * optional int64 product_variant_id = 1;
 * @return {number}
 */
proto.api.common.proto.ProductVariant.prototype.getProductVariantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.common.proto.ProductVariant} returns this
 */
proto.api.common.proto.ProductVariant.prototype.setProductVariantId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.api.common.proto.ProductVariant.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.common.proto.ProductVariant} returns this
 */
proto.api.common.proto.ProductVariant.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.api.common.proto.ProductVariant.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.common.proto.ProductVariant} returns this
 */
proto.api.common.proto.ProductVariant.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string image_url = 4;
 * @return {string}
 */
proto.api.common.proto.ProductVariant.prototype.getImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.common.proto.ProductVariant} returns this
 */
proto.api.common.proto.ProductVariant.prototype.setImageUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 color_id = 5;
 * @return {number}
 */
proto.api.common.proto.ProductVariant.prototype.getColorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.common.proto.ProductVariant} returns this
 */
proto.api.common.proto.ProductVariant.prototype.setColorId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string color_name = 6;
 * @return {string}
 */
proto.api.common.proto.ProductVariant.prototype.getColorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.common.proto.ProductVariant} returns this
 */
proto.api.common.proto.ProductVariant.prototype.setColorName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 size_id = 7;
 * @return {number}
 */
proto.api.common.proto.ProductVariant.prototype.getSizeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.common.proto.ProductVariant} returns this
 */
proto.api.common.proto.ProductVariant.prototype.setSizeId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string size_name = 8;
 * @return {string}
 */
proto.api.common.proto.ProductVariant.prototype.getSizeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.common.proto.ProductVariant} returns this
 */
proto.api.common.proto.ProductVariant.prototype.setSizeName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int64 mrp_micros = 9;
 * @return {number}
 */
proto.api.common.proto.ProductVariant.prototype.getMrpMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.common.proto.ProductVariant} returns this
 */
proto.api.common.proto.ProductVariant.prototype.setMrpMicros = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.common.proto.ProductVariantWithStore.prototype.toObject = function(opt_includeInstance) {
  return proto.api.common.proto.ProductVariantWithStore.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.common.proto.ProductVariantWithStore} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.common.proto.ProductVariantWithStore.toObject = function(includeInstance, msg) {
  var f, obj = {
productVariant: (f = msg.getProductVariant()) && proto.api.common.proto.ProductVariant.toObject(includeInstance, f),
storeWithBestPrice: (f = msg.getStoreWithBestPrice()) && proto.api.common.proto.Store.toObject(includeInstance, f),
discountedPriceMicros: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.common.proto.ProductVariantWithStore}
 */
proto.api.common.proto.ProductVariantWithStore.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.common.proto.ProductVariantWithStore;
  return proto.api.common.proto.ProductVariantWithStore.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.common.proto.ProductVariantWithStore} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.common.proto.ProductVariantWithStore}
 */
proto.api.common.proto.ProductVariantWithStore.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.common.proto.ProductVariant;
      reader.readMessage(value,proto.api.common.proto.ProductVariant.deserializeBinaryFromReader);
      msg.setProductVariant(value);
      break;
    case 2:
      var value = new proto.api.common.proto.Store;
      reader.readMessage(value,proto.api.common.proto.Store.deserializeBinaryFromReader);
      msg.setStoreWithBestPrice(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDiscountedPriceMicros(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.common.proto.ProductVariantWithStore.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.common.proto.ProductVariantWithStore.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.common.proto.ProductVariantWithStore} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.common.proto.ProductVariantWithStore.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductVariant();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.common.proto.ProductVariant.serializeBinaryToWriter
    );
  }
  f = message.getStoreWithBestPrice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.common.proto.Store.serializeBinaryToWriter
    );
  }
  f = message.getDiscountedPriceMicros();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional ProductVariant product_variant = 1;
 * @return {?proto.api.common.proto.ProductVariant}
 */
proto.api.common.proto.ProductVariantWithStore.prototype.getProductVariant = function() {
  return /** @type{?proto.api.common.proto.ProductVariant} */ (
    jspb.Message.getWrapperField(this, proto.api.common.proto.ProductVariant, 1));
};


/**
 * @param {?proto.api.common.proto.ProductVariant|undefined} value
 * @return {!proto.api.common.proto.ProductVariantWithStore} returns this
*/
proto.api.common.proto.ProductVariantWithStore.prototype.setProductVariant = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.common.proto.ProductVariantWithStore} returns this
 */
proto.api.common.proto.ProductVariantWithStore.prototype.clearProductVariant = function() {
  return this.setProductVariant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.common.proto.ProductVariantWithStore.prototype.hasProductVariant = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Store store_with_best_price = 2;
 * @return {?proto.api.common.proto.Store}
 */
proto.api.common.proto.ProductVariantWithStore.prototype.getStoreWithBestPrice = function() {
  return /** @type{?proto.api.common.proto.Store} */ (
    jspb.Message.getWrapperField(this, proto.api.common.proto.Store, 2));
};


/**
 * @param {?proto.api.common.proto.Store|undefined} value
 * @return {!proto.api.common.proto.ProductVariantWithStore} returns this
*/
proto.api.common.proto.ProductVariantWithStore.prototype.setStoreWithBestPrice = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.common.proto.ProductVariantWithStore} returns this
 */
proto.api.common.proto.ProductVariantWithStore.prototype.clearStoreWithBestPrice = function() {
  return this.setStoreWithBestPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.common.proto.ProductVariantWithStore.prototype.hasStoreWithBestPrice = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 discounted_price_micros = 3;
 * @return {number}
 */
proto.api.common.proto.ProductVariantWithStore.prototype.getDiscountedPriceMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.common.proto.ProductVariantWithStore} returns this
 */
proto.api.common.proto.ProductVariantWithStore.prototype.setDiscountedPriceMicros = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.common.proto.ProductDetails.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.common.proto.ProductDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.api.common.proto.ProductDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.common.proto.ProductDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.common.proto.ProductDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
productId: jspb.Message.getFieldWithDefault(msg, 1, 0),
brandId: jspb.Message.getFieldWithDefault(msg, 2, 0),
brandName: jspb.Message.getFieldWithDefault(msg, 3, ""),
colorsList: jspb.Message.toObjectList(msg.getColorsList(),
    proto.api.common.proto.Color.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.common.proto.ProductDetails}
 */
proto.api.common.proto.ProductDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.common.proto.ProductDetails;
  return proto.api.common.proto.ProductDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.common.proto.ProductDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.common.proto.ProductDetails}
 */
proto.api.common.proto.ProductDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setProductId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBrandId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrandName(value);
      break;
    case 4:
      var value = new proto.api.common.proto.Color;
      reader.readMessage(value,proto.api.common.proto.Color.deserializeBinaryFromReader);
      msg.addColors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.common.proto.ProductDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.common.proto.ProductDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.common.proto.ProductDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.common.proto.ProductDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getBrandId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getBrandName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getColorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.api.common.proto.Color.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 product_id = 1;
 * @return {number}
 */
proto.api.common.proto.ProductDetails.prototype.getProductId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.common.proto.ProductDetails} returns this
 */
proto.api.common.proto.ProductDetails.prototype.setProductId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 brand_id = 2;
 * @return {number}
 */
proto.api.common.proto.ProductDetails.prototype.getBrandId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.common.proto.ProductDetails} returns this
 */
proto.api.common.proto.ProductDetails.prototype.setBrandId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string brand_name = 3;
 * @return {string}
 */
proto.api.common.proto.ProductDetails.prototype.getBrandName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.common.proto.ProductDetails} returns this
 */
proto.api.common.proto.ProductDetails.prototype.setBrandName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Color colors = 4;
 * @return {!Array<!proto.api.common.proto.Color>}
 */
proto.api.common.proto.ProductDetails.prototype.getColorsList = function() {
  return /** @type{!Array<!proto.api.common.proto.Color>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.common.proto.Color, 4));
};


/**
 * @param {!Array<!proto.api.common.proto.Color>} value
 * @return {!proto.api.common.proto.ProductDetails} returns this
*/
proto.api.common.proto.ProductDetails.prototype.setColorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.api.common.proto.Color=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.common.proto.Color}
 */
proto.api.common.proto.ProductDetails.prototype.addColors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.api.common.proto.Color, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.common.proto.ProductDetails} returns this
 */
proto.api.common.proto.ProductDetails.prototype.clearColorsList = function() {
  return this.setColorsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.common.proto.Color.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.common.proto.Color.prototype.toObject = function(opt_includeInstance) {
  return proto.api.common.proto.Color.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.common.proto.Color} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.common.proto.Color.toObject = function(includeInstance, msg) {
  var f, obj = {
colorId: jspb.Message.getFieldWithDefault(msg, 1, 0),
colorName: jspb.Message.getFieldWithDefault(msg, 2, ""),
productImageUrlsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
sizesList: jspb.Message.toObjectList(msg.getSizesList(),
    proto.api.common.proto.Size.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.common.proto.Color}
 */
proto.api.common.proto.Color.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.common.proto.Color;
  return proto.api.common.proto.Color.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.common.proto.Color} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.common.proto.Color}
 */
proto.api.common.proto.Color.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setColorId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setColorName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addProductImageUrls(value);
      break;
    case 4:
      var value = new proto.api.common.proto.Size;
      reader.readMessage(value,proto.api.common.proto.Size.deserializeBinaryFromReader);
      msg.addSizes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.common.proto.Color.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.common.proto.Color.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.common.proto.Color} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.common.proto.Color.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColorId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getColorName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProductImageUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getSizesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.api.common.proto.Size.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 color_id = 1;
 * @return {number}
 */
proto.api.common.proto.Color.prototype.getColorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.common.proto.Color} returns this
 */
proto.api.common.proto.Color.prototype.setColorId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string color_name = 2;
 * @return {string}
 */
proto.api.common.proto.Color.prototype.getColorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.common.proto.Color} returns this
 */
proto.api.common.proto.Color.prototype.setColorName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string product_image_urls = 3;
 * @return {!Array<string>}
 */
proto.api.common.proto.Color.prototype.getProductImageUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.api.common.proto.Color} returns this
 */
proto.api.common.proto.Color.prototype.setProductImageUrlsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api.common.proto.Color} returns this
 */
proto.api.common.proto.Color.prototype.addProductImageUrls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.common.proto.Color} returns this
 */
proto.api.common.proto.Color.prototype.clearProductImageUrlsList = function() {
  return this.setProductImageUrlsList([]);
};


/**
 * repeated Size sizes = 4;
 * @return {!Array<!proto.api.common.proto.Size>}
 */
proto.api.common.proto.Color.prototype.getSizesList = function() {
  return /** @type{!Array<!proto.api.common.proto.Size>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.common.proto.Size, 4));
};


/**
 * @param {!Array<!proto.api.common.proto.Size>} value
 * @return {!proto.api.common.proto.Color} returns this
*/
proto.api.common.proto.Color.prototype.setSizesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.api.common.proto.Size=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.common.proto.Size}
 */
proto.api.common.proto.Color.prototype.addSizes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.api.common.proto.Size, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.common.proto.Color} returns this
 */
proto.api.common.proto.Color.prototype.clearSizesList = function() {
  return this.setSizesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.common.proto.Size.prototype.toObject = function(opt_includeInstance) {
  return proto.api.common.proto.Size.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.common.proto.Size} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.common.proto.Size.toObject = function(includeInstance, msg) {
  var f, obj = {
sizeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
sizeName: jspb.Message.getFieldWithDefault(msg, 2, ""),
productVariantId: jspb.Message.getFieldWithDefault(msg, 3, 0),
productVariantName: jspb.Message.getFieldWithDefault(msg, 4, ""),
productVariantDescription: jspb.Message.getFieldWithDefault(msg, 5, ""),
mrpMicros: jspb.Message.getFieldWithDefault(msg, 6, 0),
storeWithBestPrice: (f = msg.getStoreWithBestPrice()) && proto.api.common.proto.Store.toObject(includeInstance, f),
discountedPriceMircos: jspb.Message.getFieldWithDefault(msg, 8, 0),
quantity: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.common.proto.Size}
 */
proto.api.common.proto.Size.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.common.proto.Size;
  return proto.api.common.proto.Size.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.common.proto.Size} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.common.proto.Size}
 */
proto.api.common.proto.Size.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSizeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSizeName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setProductVariantId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductVariantName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductVariantDescription(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMrpMicros(value);
      break;
    case 7:
      var value = new proto.api.common.proto.Store;
      reader.readMessage(value,proto.api.common.proto.Store.deserializeBinaryFromReader);
      msg.setStoreWithBestPrice(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDiscountedPriceMircos(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.common.proto.Size.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.common.proto.Size.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.common.proto.Size} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.common.proto.Size.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSizeId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSizeName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProductVariantId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getProductVariantName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProductVariantDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMrpMicros();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getStoreWithBestPrice();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.api.common.proto.Store.serializeBinaryToWriter
    );
  }
  f = message.getDiscountedPriceMircos();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
};


/**
 * optional int64 size_id = 1;
 * @return {number}
 */
proto.api.common.proto.Size.prototype.getSizeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.common.proto.Size} returns this
 */
proto.api.common.proto.Size.prototype.setSizeId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string size_name = 2;
 * @return {string}
 */
proto.api.common.proto.Size.prototype.getSizeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.common.proto.Size} returns this
 */
proto.api.common.proto.Size.prototype.setSizeName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 product_variant_id = 3;
 * @return {number}
 */
proto.api.common.proto.Size.prototype.getProductVariantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.common.proto.Size} returns this
 */
proto.api.common.proto.Size.prototype.setProductVariantId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string product_variant_name = 4;
 * @return {string}
 */
proto.api.common.proto.Size.prototype.getProductVariantName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.common.proto.Size} returns this
 */
proto.api.common.proto.Size.prototype.setProductVariantName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string product_variant_description = 5;
 * @return {string}
 */
proto.api.common.proto.Size.prototype.getProductVariantDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.common.proto.Size} returns this
 */
proto.api.common.proto.Size.prototype.setProductVariantDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 mrp_micros = 6;
 * @return {number}
 */
proto.api.common.proto.Size.prototype.getMrpMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.common.proto.Size} returns this
 */
proto.api.common.proto.Size.prototype.setMrpMicros = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional Store store_with_best_price = 7;
 * @return {?proto.api.common.proto.Store}
 */
proto.api.common.proto.Size.prototype.getStoreWithBestPrice = function() {
  return /** @type{?proto.api.common.proto.Store} */ (
    jspb.Message.getWrapperField(this, proto.api.common.proto.Store, 7));
};


/**
 * @param {?proto.api.common.proto.Store|undefined} value
 * @return {!proto.api.common.proto.Size} returns this
*/
proto.api.common.proto.Size.prototype.setStoreWithBestPrice = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.common.proto.Size} returns this
 */
proto.api.common.proto.Size.prototype.clearStoreWithBestPrice = function() {
  return this.setStoreWithBestPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.common.proto.Size.prototype.hasStoreWithBestPrice = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 discounted_price_mircos = 8;
 * @return {number}
 */
proto.api.common.proto.Size.prototype.getDiscountedPriceMircos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.common.proto.Size} returns this
 */
proto.api.common.proto.Size.prototype.setDiscountedPriceMircos = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 quantity = 9;
 * @return {number}
 */
proto.api.common.proto.Size.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.common.proto.Size} returns this
 */
proto.api.common.proto.Size.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


