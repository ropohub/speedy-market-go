// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "api/common/proto/customerservice/customer_service.proto" (package "api.common.proto.customerservice", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CustomerService } from "./customer_service";
import type { AddCustomerAddressResponse } from "./customer_service";
import type { AddCustomerAddressRequest } from "./customer_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetCustomerResponse } from "./customer_service";
import type { GetCustomerRequest } from "./customer_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service api.common.proto.customerservice.CustomerService
 */
export interface ICustomerServiceClient {
    /**
     * @generated from protobuf rpc: GetCustomer
     */
    getCustomer(input: GetCustomerRequest, options?: RpcOptions): UnaryCall<GetCustomerRequest, GetCustomerResponse>;
    /**
     * @generated from protobuf rpc: AddCustomerAddress
     */
    addCustomerAddress(input: AddCustomerAddressRequest, options?: RpcOptions): UnaryCall<AddCustomerAddressRequest, AddCustomerAddressResponse>;
}
/**
 * @generated from protobuf service api.common.proto.customerservice.CustomerService
 */
export class CustomerServiceClient implements ICustomerServiceClient, ServiceInfo {
    typeName = CustomerService.typeName;
    methods = CustomerService.methods;
    options = CustomerService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetCustomer
     */
    getCustomer(input: GetCustomerRequest, options?: RpcOptions): UnaryCall<GetCustomerRequest, GetCustomerResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCustomerRequest, GetCustomerResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddCustomerAddress
     */
    addCustomerAddress(input: AddCustomerAddressRequest, options?: RpcOptions): UnaryCall<AddCustomerAddressRequest, AddCustomerAddressResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddCustomerAddressRequest, AddCustomerAddressResponse>("unary", this._transport, method, opt, input);
    }
}
