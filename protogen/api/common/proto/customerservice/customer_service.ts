// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "api/common/proto/customerservice/customer_service.proto" (package "api.common.proto.customerservice", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Address } from "../address";
import { ResponseHeader } from "../header";
import { RequestHeader } from "../header";
/**
 * @generated from protobuf message api.common.proto.customerservice.GetCustomerRequest
 */
export interface GetCustomerRequest {
    /**
     * @generated from protobuf field: api.common.proto.RequestHeader header = 1
     */
    header?: RequestHeader;
    /**
     * @generated from protobuf field: string phone_number = 2
     */
    phoneNumber: string;
}
/**
 * @generated from protobuf message api.common.proto.customerservice.GetCustomerResponse
 */
export interface GetCustomerResponse {
    /**
     * @generated from protobuf field: api.common.proto.ResponseHeader header = 1
     */
    header?: ResponseHeader;
    /**
     * @generated from protobuf field: repeated api.common.proto.customerservice.OrderReciever order_recievers = 2
     */
    orderRecievers: OrderReciever[];
}
/**
 * @generated from protobuf message api.common.proto.customerservice.AddCustomerAddressRequest
 */
export interface AddCustomerAddressRequest {
    /**
     * @generated from protobuf field: api.common.proto.RequestHeader header = 1
     */
    header?: RequestHeader;
    /**
     * @generated from protobuf field: api.common.proto.customerservice.OrderReciever order_reciever = 2
     */
    orderReciever?: OrderReciever;
}
/**
 * @generated from protobuf message api.common.proto.customerservice.AddCustomerAddressResponse
 */
export interface AddCustomerAddressResponse {
    /**
     * @generated from protobuf field: api.common.proto.ResponseHeader header = 1
     */
    header?: ResponseHeader;
    /**
     * @generated from protobuf field: int64 customer_address_link_id = 2
     */
    customerAddressLinkId: bigint;
}
/**
 * @generated from protobuf message api.common.proto.customerservice.OrderReciever
 */
export interface OrderReciever {
    /**
     * @generated from protobuf field: api.common.proto.Address reciever_address = 1
     */
    recieverAddress?: Address;
    /**
     * @generated from protobuf field: string house_number_and_floor = 2
     */
    houseNumberAndFloor: string;
    /**
     * @generated from protobuf field: string receiver_name = 3
     */
    receiverName: string;
    /**
     * @generated from protobuf field: string reciever_phone_number = 4
     */
    recieverPhoneNumber: string;
    /**
     * @generated from protobuf field: int64 customer_address_link_id = 5
     */
    customerAddressLinkId: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetCustomerRequest$Type extends MessageType<GetCustomerRequest> {
    constructor() {
        super("api.common.proto.customerservice.GetCustomerRequest", [
            { no: 1, name: "header", kind: "message", T: () => RequestHeader },
            { no: 2, name: "phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetCustomerRequest>): GetCustomerRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.phoneNumber = "";
        if (value !== undefined)
            reflectionMergePartial<GetCustomerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCustomerRequest): GetCustomerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.common.proto.RequestHeader header */ 1:
                    message.header = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* string phone_number */ 2:
                    message.phoneNumber = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCustomerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.common.proto.RequestHeader header = 1; */
        if (message.header)
            RequestHeader.internalBinaryWrite(message.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string phone_number = 2; */
        if (message.phoneNumber !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.phoneNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.customerservice.GetCustomerRequest
 */
export const GetCustomerRequest = new GetCustomerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCustomerResponse$Type extends MessageType<GetCustomerResponse> {
    constructor() {
        super("api.common.proto.customerservice.GetCustomerResponse", [
            { no: 1, name: "header", kind: "message", T: () => ResponseHeader },
            { no: 2, name: "order_recievers", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => OrderReciever }
        ]);
    }
    create(value?: PartialMessage<GetCustomerResponse>): GetCustomerResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.orderRecievers = [];
        if (value !== undefined)
            reflectionMergePartial<GetCustomerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCustomerResponse): GetCustomerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.common.proto.ResponseHeader header */ 1:
                    message.header = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* repeated api.common.proto.customerservice.OrderReciever order_recievers */ 2:
                    message.orderRecievers.push(OrderReciever.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCustomerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.common.proto.ResponseHeader header = 1; */
        if (message.header)
            ResponseHeader.internalBinaryWrite(message.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated api.common.proto.customerservice.OrderReciever order_recievers = 2; */
        for (let i = 0; i < message.orderRecievers.length; i++)
            OrderReciever.internalBinaryWrite(message.orderRecievers[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.customerservice.GetCustomerResponse
 */
export const GetCustomerResponse = new GetCustomerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddCustomerAddressRequest$Type extends MessageType<AddCustomerAddressRequest> {
    constructor() {
        super("api.common.proto.customerservice.AddCustomerAddressRequest", [
            { no: 1, name: "header", kind: "message", T: () => RequestHeader },
            { no: 2, name: "order_reciever", kind: "message", T: () => OrderReciever }
        ]);
    }
    create(value?: PartialMessage<AddCustomerAddressRequest>): AddCustomerAddressRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AddCustomerAddressRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddCustomerAddressRequest): AddCustomerAddressRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.common.proto.RequestHeader header */ 1:
                    message.header = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* api.common.proto.customerservice.OrderReciever order_reciever */ 2:
                    message.orderReciever = OrderReciever.internalBinaryRead(reader, reader.uint32(), options, message.orderReciever);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddCustomerAddressRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.common.proto.RequestHeader header = 1; */
        if (message.header)
            RequestHeader.internalBinaryWrite(message.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* api.common.proto.customerservice.OrderReciever order_reciever = 2; */
        if (message.orderReciever)
            OrderReciever.internalBinaryWrite(message.orderReciever, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.customerservice.AddCustomerAddressRequest
 */
export const AddCustomerAddressRequest = new AddCustomerAddressRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddCustomerAddressResponse$Type extends MessageType<AddCustomerAddressResponse> {
    constructor() {
        super("api.common.proto.customerservice.AddCustomerAddressResponse", [
            { no: 1, name: "header", kind: "message", T: () => ResponseHeader },
            { no: 2, name: "customer_address_link_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AddCustomerAddressResponse>): AddCustomerAddressResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.customerAddressLinkId = 0n;
        if (value !== undefined)
            reflectionMergePartial<AddCustomerAddressResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddCustomerAddressResponse): AddCustomerAddressResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.common.proto.ResponseHeader header */ 1:
                    message.header = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* int64 customer_address_link_id */ 2:
                    message.customerAddressLinkId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddCustomerAddressResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.common.proto.ResponseHeader header = 1; */
        if (message.header)
            ResponseHeader.internalBinaryWrite(message.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 customer_address_link_id = 2; */
        if (message.customerAddressLinkId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.customerAddressLinkId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.customerservice.AddCustomerAddressResponse
 */
export const AddCustomerAddressResponse = new AddCustomerAddressResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderReciever$Type extends MessageType<OrderReciever> {
    constructor() {
        super("api.common.proto.customerservice.OrderReciever", [
            { no: 1, name: "reciever_address", kind: "message", T: () => Address },
            { no: 2, name: "house_number_and_floor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "receiver_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "reciever_phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "customer_address_link_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<OrderReciever>): OrderReciever {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.houseNumberAndFloor = "";
        message.receiverName = "";
        message.recieverPhoneNumber = "";
        message.customerAddressLinkId = 0n;
        if (value !== undefined)
            reflectionMergePartial<OrderReciever>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderReciever): OrderReciever {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.common.proto.Address reciever_address */ 1:
                    message.recieverAddress = Address.internalBinaryRead(reader, reader.uint32(), options, message.recieverAddress);
                    break;
                case /* string house_number_and_floor */ 2:
                    message.houseNumberAndFloor = reader.string();
                    break;
                case /* string receiver_name */ 3:
                    message.receiverName = reader.string();
                    break;
                case /* string reciever_phone_number */ 4:
                    message.recieverPhoneNumber = reader.string();
                    break;
                case /* int64 customer_address_link_id */ 5:
                    message.customerAddressLinkId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderReciever, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.common.proto.Address reciever_address = 1; */
        if (message.recieverAddress)
            Address.internalBinaryWrite(message.recieverAddress, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string house_number_and_floor = 2; */
        if (message.houseNumberAndFloor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.houseNumberAndFloor);
        /* string receiver_name = 3; */
        if (message.receiverName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.receiverName);
        /* string reciever_phone_number = 4; */
        if (message.recieverPhoneNumber !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.recieverPhoneNumber);
        /* int64 customer_address_link_id = 5; */
        if (message.customerAddressLinkId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.customerAddressLinkId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.customerservice.OrderReciever
 */
export const OrderReciever = new OrderReciever$Type();
/**
 * @generated ServiceType for protobuf service api.common.proto.customerservice.CustomerService
 */
export const CustomerService = new ServiceType("api.common.proto.customerservice.CustomerService", [
    { name: "GetCustomer", options: {}, I: GetCustomerRequest, O: GetCustomerResponse },
    { name: "AddCustomerAddress", options: {}, I: AddCustomerAddressRequest, O: AddCustomerAddressResponse }
]);
