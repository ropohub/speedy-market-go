// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "api/common/proto/filter.proto" (package "api.common.proto", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Filter represents a condition or criteria used to query or filter data.
 *
 * @generated from protobuf message api.common.proto.Filter
 */
export interface Filter {
    /**
     * The operator to apply for this filter condition.
     *
     * @generated from protobuf field: api.common.proto.Filter.Operator operator = 1
     */
    operator: Filter_Operator;
    /**
     * A list of values associated with the filter condition.
     * The interpretation of these values depends on the operator.
     *
     * @generated from protobuf field: api.common.proto.Value value = 2
     */
    value?: Value;
}
/**
 * Operator defines the type of comparison or condition to be applied in the
 * filter.
 *
 * @generated from protobuf enum api.common.proto.Filter.Operator
 */
export enum Filter_Operator {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: EQUALS = 1;
     */
    EQUALS = 1,
    /**
     * @generated from protobuf enum value: NOT_EQUALS = 2;
     */
    NOT_EQUALS = 2,
    /**
     * @generated from protobuf enum value: IN = 3;
     */
    IN = 3,
    /**
     * @generated from protobuf enum value: NOT_IN = 4;
     */
    NOT_IN = 4,
    /**
     * @generated from protobuf enum value: GREATHER_THAN = 5;
     */
    GREATHER_THAN = 5,
    /**
     * @generated from protobuf enum value: GREATHER_THAN_OR_EQUALS = 6;
     */
    GREATHER_THAN_OR_EQUALS = 6,
    /**
     * @generated from protobuf enum value: LESS_THAN = 7;
     */
    LESS_THAN = 7,
    /**
     * @generated from protobuf enum value: LESS_THAN_OR_EQUALS = 8;
     */
    LESS_THAN_OR_EQUALS = 8,
    /**
     * @generated from protobuf enum value: IS_NULL = 9;
     */
    IS_NULL = 9,
    /**
     * @generated from protobuf enum value: IS_NOT_NULL = 10;
     */
    IS_NOT_NULL = 10,
    /**
     * @generated from protobuf enum value: CONTAINS_ANY = 11;
     */
    CONTAINS_ANY = 11,
    /**
     * @generated from protobuf enum value: CONTAINS_ALL = 12;
     */
    CONTAINS_ALL = 12,
    /**
     * @generated from protobuf enum value: CONTAINS_NONE = 13;
     */
    CONTAINS_NONE = 13,
    /**
     * @generated from protobuf enum value: NOT_EMPTY = 14;
     */
    NOT_EMPTY = 14
}
/**
 * Value represents a single value of a specific type used in a filter
 * condition.
 *
 * @generated from protobuf message api.common.proto.Value
 */
export interface Value {
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "boolValue";
        /**
         * @generated from protobuf field: bool bool_value = 1
         */
        boolValue: boolean;
    } | {
        oneofKind: "stringValue";
        /**
         * @generated from protobuf field: string string_value = 2
         */
        stringValue: string;
    } | {
        oneofKind: "int64Value";
        /**
         * @generated from protobuf field: int64 int64_value = 3
         */
        int64Value: bigint;
    } | {
        oneofKind: "uint64Value";
        /**
         * @generated from protobuf field: uint64 uint64_value = 4
         */
        uint64Value: bigint;
    } | {
        oneofKind: "floatValue";
        /**
         * @generated from protobuf field: float float_value = 5
         */
        floatValue: number;
    } | {
        oneofKind: "doubleValue";
        /**
         * @generated from protobuf field: double double_value = 6
         */
        doubleValue: number;
    } | {
        oneofKind: "bytesValue";
        /**
         * @generated from protobuf field: bytes bytes_value = 7
         */
        bytesValue: Uint8Array;
    } | {
        oneofKind: "boolList";
        /**
         * @generated from protobuf field: api.common.proto.BoolList bool_list = 8
         */
        boolList: BoolList;
    } | {
        oneofKind: "stringList";
        /**
         * @generated from protobuf field: api.common.proto.StringList string_list = 9
         */
        stringList: StringList;
    } | {
        oneofKind: "int64List";
        /**
         * @generated from protobuf field: api.common.proto.Int64List int64_list = 10
         */
        int64List: Int64List;
    } | {
        oneofKind: "uint64List";
        /**
         * @generated from protobuf field: api.common.proto.Uint64Values uint64_list = 11
         */
        uint64List: Uint64Values;
    } | {
        oneofKind: "floatList";
        /**
         * @generated from protobuf field: api.common.proto.FloatList float_list = 12
         */
        floatList: FloatList;
    } | {
        oneofKind: "doubleList";
        /**
         * @generated from protobuf field: api.common.proto.DoubleList double_list = 13
         */
        doubleList: DoubleList;
    } | {
        oneofKind: "bytesList";
        /**
         * @generated from protobuf field: api.common.proto.BytesList bytes_list = 14
         */
        bytesList: BytesList;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message api.common.proto.BoolList
 */
export interface BoolList {
    /**
     * @generated from protobuf field: repeated bool bool_values = 1
     */
    boolValues: boolean[];
}
/**
 * @generated from protobuf message api.common.proto.StringList
 */
export interface StringList {
    /**
     * @generated from protobuf field: repeated string string_values = 1
     */
    stringValues: string[];
}
/**
 * @generated from protobuf message api.common.proto.Int64List
 */
export interface Int64List {
    /**
     * @generated from protobuf field: repeated int64 int64_values = 1
     */
    int64Values: bigint[];
}
/**
 * @generated from protobuf message api.common.proto.Uint64Values
 */
export interface Uint64Values {
    /**
     * @generated from protobuf field: repeated uint64 uint64_values = 11
     */
    uint64Values: bigint[];
}
/**
 * @generated from protobuf message api.common.proto.FloatList
 */
export interface FloatList {
    /**
     * @generated from protobuf field: repeated float float_values = 12
     */
    floatValues: number[];
}
/**
 * @generated from protobuf message api.common.proto.DoubleList
 */
export interface DoubleList {
    /**
     * @generated from protobuf field: repeated double double_values = 13
     */
    doubleValues: number[];
}
/**
 * @generated from protobuf message api.common.proto.BytesList
 */
export interface BytesList {
    /**
     * @generated from protobuf field: repeated bytes bytes_values = 14
     */
    bytesValues: Uint8Array[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Filter$Type extends MessageType<Filter> {
    constructor() {
        super("api.common.proto.Filter", [
            { no: 1, name: "operator", kind: "enum", T: () => ["api.common.proto.Filter.Operator", Filter_Operator] },
            { no: 2, name: "value", kind: "message", T: () => Value }
        ]);
    }
    create(value?: PartialMessage<Filter>): Filter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.operator = 0;
        if (value !== undefined)
            reflectionMergePartial<Filter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Filter): Filter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.common.proto.Filter.Operator operator */ 1:
                    message.operator = reader.int32();
                    break;
                case /* api.common.proto.Value value */ 2:
                    message.value = Value.internalBinaryRead(reader, reader.uint32(), options, message.value);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Filter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.common.proto.Filter.Operator operator = 1; */
        if (message.operator !== 0)
            writer.tag(1, WireType.Varint).int32(message.operator);
        /* api.common.proto.Value value = 2; */
        if (message.value)
            Value.internalBinaryWrite(message.value, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.Filter
 */
export const Filter = new Filter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Value$Type extends MessageType<Value> {
    constructor() {
        super("api.common.proto.Value", [
            { no: 1, name: "bool_value", kind: "scalar", oneof: "value", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "string_value", kind: "scalar", oneof: "value", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "int64_value", kind: "scalar", oneof: "value", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "uint64_value", kind: "scalar", oneof: "value", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "float_value", kind: "scalar", oneof: "value", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "double_value", kind: "scalar", oneof: "value", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "bytes_value", kind: "scalar", oneof: "value", T: 12 /*ScalarType.BYTES*/ },
            { no: 8, name: "bool_list", kind: "message", oneof: "value", T: () => BoolList },
            { no: 9, name: "string_list", kind: "message", oneof: "value", T: () => StringList },
            { no: 10, name: "int64_list", kind: "message", oneof: "value", T: () => Int64List },
            { no: 11, name: "uint64_list", kind: "message", oneof: "value", T: () => Uint64Values },
            { no: 12, name: "float_list", kind: "message", oneof: "value", T: () => FloatList },
            { no: 13, name: "double_list", kind: "message", oneof: "value", T: () => DoubleList },
            { no: 14, name: "bytes_list", kind: "message", oneof: "value", T: () => BytesList }
        ]);
    }
    create(value?: PartialMessage<Value>): Value {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Value>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Value): Value {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool bool_value */ 1:
                    message.value = {
                        oneofKind: "boolValue",
                        boolValue: reader.bool()
                    };
                    break;
                case /* string string_value */ 2:
                    message.value = {
                        oneofKind: "stringValue",
                        stringValue: reader.string()
                    };
                    break;
                case /* int64 int64_value */ 3:
                    message.value = {
                        oneofKind: "int64Value",
                        int64Value: reader.int64().toBigInt()
                    };
                    break;
                case /* uint64 uint64_value */ 4:
                    message.value = {
                        oneofKind: "uint64Value",
                        uint64Value: reader.uint64().toBigInt()
                    };
                    break;
                case /* float float_value */ 5:
                    message.value = {
                        oneofKind: "floatValue",
                        floatValue: reader.float()
                    };
                    break;
                case /* double double_value */ 6:
                    message.value = {
                        oneofKind: "doubleValue",
                        doubleValue: reader.double()
                    };
                    break;
                case /* bytes bytes_value */ 7:
                    message.value = {
                        oneofKind: "bytesValue",
                        bytesValue: reader.bytes()
                    };
                    break;
                case /* api.common.proto.BoolList bool_list */ 8:
                    message.value = {
                        oneofKind: "boolList",
                        boolList: BoolList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).boolList)
                    };
                    break;
                case /* api.common.proto.StringList string_list */ 9:
                    message.value = {
                        oneofKind: "stringList",
                        stringList: StringList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).stringList)
                    };
                    break;
                case /* api.common.proto.Int64List int64_list */ 10:
                    message.value = {
                        oneofKind: "int64List",
                        int64List: Int64List.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).int64List)
                    };
                    break;
                case /* api.common.proto.Uint64Values uint64_list */ 11:
                    message.value = {
                        oneofKind: "uint64List",
                        uint64List: Uint64Values.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).uint64List)
                    };
                    break;
                case /* api.common.proto.FloatList float_list */ 12:
                    message.value = {
                        oneofKind: "floatList",
                        floatList: FloatList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).floatList)
                    };
                    break;
                case /* api.common.proto.DoubleList double_list */ 13:
                    message.value = {
                        oneofKind: "doubleList",
                        doubleList: DoubleList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).doubleList)
                    };
                    break;
                case /* api.common.proto.BytesList bytes_list */ 14:
                    message.value = {
                        oneofKind: "bytesList",
                        bytesList: BytesList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).bytesList)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Value, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool bool_value = 1; */
        if (message.value.oneofKind === "boolValue")
            writer.tag(1, WireType.Varint).bool(message.value.boolValue);
        /* string string_value = 2; */
        if (message.value.oneofKind === "stringValue")
            writer.tag(2, WireType.LengthDelimited).string(message.value.stringValue);
        /* int64 int64_value = 3; */
        if (message.value.oneofKind === "int64Value")
            writer.tag(3, WireType.Varint).int64(message.value.int64Value);
        /* uint64 uint64_value = 4; */
        if (message.value.oneofKind === "uint64Value")
            writer.tag(4, WireType.Varint).uint64(message.value.uint64Value);
        /* float float_value = 5; */
        if (message.value.oneofKind === "floatValue")
            writer.tag(5, WireType.Bit32).float(message.value.floatValue);
        /* double double_value = 6; */
        if (message.value.oneofKind === "doubleValue")
            writer.tag(6, WireType.Bit64).double(message.value.doubleValue);
        /* bytes bytes_value = 7; */
        if (message.value.oneofKind === "bytesValue")
            writer.tag(7, WireType.LengthDelimited).bytes(message.value.bytesValue);
        /* api.common.proto.BoolList bool_list = 8; */
        if (message.value.oneofKind === "boolList")
            BoolList.internalBinaryWrite(message.value.boolList, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* api.common.proto.StringList string_list = 9; */
        if (message.value.oneofKind === "stringList")
            StringList.internalBinaryWrite(message.value.stringList, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* api.common.proto.Int64List int64_list = 10; */
        if (message.value.oneofKind === "int64List")
            Int64List.internalBinaryWrite(message.value.int64List, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* api.common.proto.Uint64Values uint64_list = 11; */
        if (message.value.oneofKind === "uint64List")
            Uint64Values.internalBinaryWrite(message.value.uint64List, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* api.common.proto.FloatList float_list = 12; */
        if (message.value.oneofKind === "floatList")
            FloatList.internalBinaryWrite(message.value.floatList, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* api.common.proto.DoubleList double_list = 13; */
        if (message.value.oneofKind === "doubleList")
            DoubleList.internalBinaryWrite(message.value.doubleList, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* api.common.proto.BytesList bytes_list = 14; */
        if (message.value.oneofKind === "bytesList")
            BytesList.internalBinaryWrite(message.value.bytesList, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.Value
 */
export const Value = new Value$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BoolList$Type extends MessageType<BoolList> {
    constructor() {
        super("api.common.proto.BoolList", [
            { no: 1, name: "bool_values", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<BoolList>): BoolList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.boolValues = [];
        if (value !== undefined)
            reflectionMergePartial<BoolList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BoolList): BoolList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bool bool_values */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.boolValues.push(reader.bool());
                    else
                        message.boolValues.push(reader.bool());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BoolList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bool bool_values = 1; */
        if (message.boolValues.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.boolValues.length; i++)
                writer.bool(message.boolValues[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.BoolList
 */
export const BoolList = new BoolList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StringList$Type extends MessageType<StringList> {
    constructor() {
        super("api.common.proto.StringList", [
            { no: 1, name: "string_values", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StringList>): StringList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stringValues = [];
        if (value !== undefined)
            reflectionMergePartial<StringList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StringList): StringList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string string_values */ 1:
                    message.stringValues.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StringList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string string_values = 1; */
        for (let i = 0; i < message.stringValues.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.stringValues[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.StringList
 */
export const StringList = new StringList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Int64List$Type extends MessageType<Int64List> {
    constructor() {
        super("api.common.proto.Int64List", [
            { no: 1, name: "int64_values", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Int64List>): Int64List {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.int64Values = [];
        if (value !== undefined)
            reflectionMergePartial<Int64List>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Int64List): Int64List {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 int64_values */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.int64Values.push(reader.int64().toBigInt());
                    else
                        message.int64Values.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Int64List, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 int64_values = 1; */
        if (message.int64Values.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.int64Values.length; i++)
                writer.int64(message.int64Values[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.Int64List
 */
export const Int64List = new Int64List$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Uint64Values$Type extends MessageType<Uint64Values> {
    constructor() {
        super("api.common.proto.Uint64Values", [
            { no: 11, name: "uint64_values", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Uint64Values>): Uint64Values {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uint64Values = [];
        if (value !== undefined)
            reflectionMergePartial<Uint64Values>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Uint64Values): Uint64Values {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 uint64_values */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.uint64Values.push(reader.uint64().toBigInt());
                    else
                        message.uint64Values.push(reader.uint64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Uint64Values, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 uint64_values = 11; */
        if (message.uint64Values.length) {
            writer.tag(11, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.uint64Values.length; i++)
                writer.uint64(message.uint64Values[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.Uint64Values
 */
export const Uint64Values = new Uint64Values$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FloatList$Type extends MessageType<FloatList> {
    constructor() {
        super("api.common.proto.FloatList", [
            { no: 12, name: "float_values", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<FloatList>): FloatList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.floatValues = [];
        if (value !== undefined)
            reflectionMergePartial<FloatList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FloatList): FloatList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated float float_values */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.floatValues.push(reader.float());
                    else
                        message.floatValues.push(reader.float());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FloatList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated float float_values = 12; */
        if (message.floatValues.length) {
            writer.tag(12, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.floatValues.length; i++)
                writer.float(message.floatValues[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.FloatList
 */
export const FloatList = new FloatList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoubleList$Type extends MessageType<DoubleList> {
    constructor() {
        super("api.common.proto.DoubleList", [
            { no: 13, name: "double_values", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<DoubleList>): DoubleList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.doubleValues = [];
        if (value !== undefined)
            reflectionMergePartial<DoubleList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoubleList): DoubleList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated double double_values */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.doubleValues.push(reader.double());
                    else
                        message.doubleValues.push(reader.double());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoubleList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated double double_values = 13; */
        if (message.doubleValues.length) {
            writer.tag(13, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.doubleValues.length; i++)
                writer.double(message.doubleValues[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.DoubleList
 */
export const DoubleList = new DoubleList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BytesList$Type extends MessageType<BytesList> {
    constructor() {
        super("api.common.proto.BytesList", [
            { no: 14, name: "bytes_values", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<BytesList>): BytesList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bytesValues = [];
        if (value !== undefined)
            reflectionMergePartial<BytesList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BytesList): BytesList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes bytes_values */ 14:
                    message.bytesValues.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BytesList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bytes bytes_values = 14; */
        for (let i = 0; i < message.bytesValues.length; i++)
            writer.tag(14, WireType.LengthDelimited).bytes(message.bytesValues[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.BytesList
 */
export const BytesList = new BytesList$Type();
