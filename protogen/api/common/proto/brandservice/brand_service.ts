// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "api/common/proto/brandservice/brand_service.proto" (package "api.common.proto.brandservice", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Brand } from "../brand";
import { ResponseHeader } from "../header";
import { RequestHeader } from "../header";
/**
 * GetBrandRequest represents the input message for the GetBrand RPC.
 *
 * @generated from protobuf message api.common.proto.brandservice.GetBrandRequest
 */
export interface GetBrandRequest {
    /**
     * Header for the request, typically containing metadata like authentication
     * or tracing information.
     *
     * @generated from protobuf field: api.common.proto.RequestHeader header = 1
     */
    header?: RequestHeader;
}
/**
 * GetBrandResponse represents the output message for the GetBrand RPC.
 *
 * @generated from protobuf message api.common.proto.brandservice.GetBrandResponse
 */
export interface GetBrandResponse {
    /**
     * Header for the response, typically containing metadata like status codes or
     * tracing information.
     *
     * @generated from protobuf field: api.common.proto.ResponseHeader header = 1
     */
    header?: ResponseHeader;
    /**
     * A list of brands retrieved in response to the request.
     *
     * @generated from protobuf field: repeated api.common.proto.Brand brands = 2
     */
    brands: Brand[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GetBrandRequest$Type extends MessageType<GetBrandRequest> {
    constructor() {
        super("api.common.proto.brandservice.GetBrandRequest", [
            { no: 1, name: "header", kind: "message", T: () => RequestHeader }
        ]);
    }
    create(value?: PartialMessage<GetBrandRequest>): GetBrandRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetBrandRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBrandRequest): GetBrandRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.common.proto.RequestHeader header */ 1:
                    message.header = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBrandRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.common.proto.RequestHeader header = 1; */
        if (message.header)
            RequestHeader.internalBinaryWrite(message.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.brandservice.GetBrandRequest
 */
export const GetBrandRequest = new GetBrandRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBrandResponse$Type extends MessageType<GetBrandResponse> {
    constructor() {
        super("api.common.proto.brandservice.GetBrandResponse", [
            { no: 1, name: "header", kind: "message", T: () => ResponseHeader },
            { no: 2, name: "brands", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Brand }
        ]);
    }
    create(value?: PartialMessage<GetBrandResponse>): GetBrandResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brands = [];
        if (value !== undefined)
            reflectionMergePartial<GetBrandResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBrandResponse): GetBrandResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.common.proto.ResponseHeader header */ 1:
                    message.header = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* repeated api.common.proto.Brand brands */ 2:
                    message.brands.push(Brand.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBrandResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.common.proto.ResponseHeader header = 1; */
        if (message.header)
            ResponseHeader.internalBinaryWrite(message.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated api.common.proto.Brand brands = 2; */
        for (let i = 0; i < message.brands.length; i++)
            Brand.internalBinaryWrite(message.brands[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.brandservice.GetBrandResponse
 */
export const GetBrandResponse = new GetBrandResponse$Type();
/**
 * @generated ServiceType for protobuf service api.common.proto.brandservice.BrandService
 */
export const BrandService = new ServiceType("api.common.proto.brandservice.BrandService", [
    { name: "GetBrand", options: {}, I: GetBrandRequest, O: GetBrandResponse }
]);
