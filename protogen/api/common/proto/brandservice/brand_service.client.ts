// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "api/common/proto/brandservice/brand_service.proto" (package "api.common.proto.brandservice", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { BrandService } from "./brand_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetBrandResponse } from "./brand_service";
import type { GetBrandRequest } from "./brand_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * BrandService defines a gRPC service for managing brand-related operations.
 *
 * @generated from protobuf service api.common.proto.brandservice.BrandService
 */
export interface IBrandServiceClient {
    /**
     * GetBrand retrieves information about one or more brands.
     *
     * @generated from protobuf rpc: GetBrand
     */
    getBrand(input: GetBrandRequest, options?: RpcOptions): UnaryCall<GetBrandRequest, GetBrandResponse>;
}
/**
 * BrandService defines a gRPC service for managing brand-related operations.
 *
 * @generated from protobuf service api.common.proto.brandservice.BrandService
 */
export class BrandServiceClient implements IBrandServiceClient, ServiceInfo {
    typeName = BrandService.typeName;
    methods = BrandService.methods;
    options = BrandService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * GetBrand retrieves information about one or more brands.
     *
     * @generated from protobuf rpc: GetBrand
     */
    getBrand(input: GetBrandRequest, options?: RpcOptions): UnaryCall<GetBrandRequest, GetBrandResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBrandRequest, GetBrandResponse>("unary", this._transport, method, opt, input);
    }
}
