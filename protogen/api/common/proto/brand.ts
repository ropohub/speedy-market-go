// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "api/common/proto/brand.proto" (package "api.common.proto", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Brand represents information about a brand, including its identifier, name,
 * description, and associated images.
 *
 * @generated from protobuf message api.common.proto.Brand
 */
export interface Brand {
    /**
     * @generated from protobuf field: api.common.proto.Brand.PrimaryKey primary_key = 1
     */
    primaryKey?: Brand_PrimaryKey;
    /**
     * The name of the brand.
     *
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * A brief description of the brand.
     *
     * @generated from protobuf field: string description = 3
     */
    description: string;
    /**
     * A list of URLs pointing to images associated with the brand.
     *
     * @generated from protobuf field: repeated string image_urls = 4
     */
    imageUrls: string[];
}
/**
 * PrimaryKey is a nested message that uniquely identifies a brand.
 *
 * @generated from protobuf message api.common.proto.Brand.PrimaryKey
 */
export interface Brand_PrimaryKey {
    /**
     * The unique ID of the brand.
     *
     * @generated from protobuf field: int32 brand_id = 1
     */
    brandId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class Brand$Type extends MessageType<Brand> {
    constructor() {
        super("api.common.proto.Brand", [
            { no: 1, name: "primary_key", kind: "message", T: () => Brand_PrimaryKey },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "image_urls", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Brand>): Brand {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.description = "";
        message.imageUrls = [];
        if (value !== undefined)
            reflectionMergePartial<Brand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Brand): Brand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.common.proto.Brand.PrimaryKey primary_key */ 1:
                    message.primaryKey = Brand_PrimaryKey.internalBinaryRead(reader, reader.uint32(), options, message.primaryKey);
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* repeated string image_urls */ 4:
                    message.imageUrls.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Brand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.common.proto.Brand.PrimaryKey primary_key = 1; */
        if (message.primaryKey)
            Brand_PrimaryKey.internalBinaryWrite(message.primaryKey, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* repeated string image_urls = 4; */
        for (let i = 0; i < message.imageUrls.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.imageUrls[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.Brand
 */
export const Brand = new Brand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Brand_PrimaryKey$Type extends MessageType<Brand_PrimaryKey> {
    constructor() {
        super("api.common.proto.Brand.PrimaryKey", [
            { no: 1, name: "brand_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Brand_PrimaryKey>): Brand_PrimaryKey {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brandId = 0;
        if (value !== undefined)
            reflectionMergePartial<Brand_PrimaryKey>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Brand_PrimaryKey): Brand_PrimaryKey {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 brand_id */ 1:
                    message.brandId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Brand_PrimaryKey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 brand_id = 1; */
        if (message.brandId !== 0)
            writer.tag(1, WireType.Varint).int32(message.brandId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.Brand.PrimaryKey
 */
export const Brand_PrimaryKey = new Brand_PrimaryKey$Type();
