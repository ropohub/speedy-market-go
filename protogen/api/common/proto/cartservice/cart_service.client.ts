// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "api/common/proto/cartservice/cart_service.proto" (package "api.common.proto.cartservice", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CartService } from "./cart_service";
import type { MutateCartResponse } from "./cart_service";
import type { MutateCartRequest } from "./cart_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetCartItemsResponse } from "./cart_service";
import type { GetCartItemsRequest } from "./cart_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service api.common.proto.cartservice.CartService
 */
export interface ICartServiceClient {
    /**
     * @generated from protobuf rpc: GetCartItems
     */
    getCartItems(input: GetCartItemsRequest, options?: RpcOptions): UnaryCall<GetCartItemsRequest, GetCartItemsResponse>;
    /**
     * @generated from protobuf rpc: MutateCart
     */
    mutateCart(input: MutateCartRequest, options?: RpcOptions): UnaryCall<MutateCartRequest, MutateCartResponse>;
}
/**
 * @generated from protobuf service api.common.proto.cartservice.CartService
 */
export class CartServiceClient implements ICartServiceClient, ServiceInfo {
    typeName = CartService.typeName;
    methods = CartService.methods;
    options = CartService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetCartItems
     */
    getCartItems(input: GetCartItemsRequest, options?: RpcOptions): UnaryCall<GetCartItemsRequest, GetCartItemsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCartItemsRequest, GetCartItemsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: MutateCart
     */
    mutateCart(input: MutateCartRequest, options?: RpcOptions): UnaryCall<MutateCartRequest, MutateCartResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<MutateCartRequest, MutateCartResponse>("unary", this._transport, method, opt, input);
    }
}
