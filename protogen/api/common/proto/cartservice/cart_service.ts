// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "api/common/proto/cartservice/cart_service.proto" (package "api.common.proto.cartservice", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ResponseHeader } from "../header";
/**
 * @generated from protobuf message api.common.proto.cartservice.GetCartItemsRequest
 */
export interface GetCartItemsRequest {
}
/**
 * @generated from protobuf message api.common.proto.cartservice.GetCartItemsResponse
 */
export interface GetCartItemsResponse {
    /**
     * @generated from protobuf field: api.common.proto.ResponseHeader header = 1
     */
    header?: ResponseHeader;
    /**
     * @generated from protobuf field: repeated api.common.proto.cartservice.ItemWithQuantity items_with_quantity = 2
     */
    itemsWithQuantity: ItemWithQuantity[];
}
/**
 * @generated from protobuf message api.common.proto.cartservice.MutateCartRequest
 */
export interface MutateCartRequest {
    /**
     * @generated from protobuf field: api.common.proto.cartservice.ItemWithQuantity item = 1
     */
    item?: ItemWithQuantity;
}
/**
 * @generated from protobuf message api.common.proto.cartservice.MutateCartResponse
 */
export interface MutateCartResponse {
    /**
     * @generated from protobuf field: api.common.proto.ResponseHeader header = 1
     */
    header?: ResponseHeader;
}
/**
 * @generated from protobuf message api.common.proto.cartservice.ItemWithQuantity
 */
export interface ItemWithQuantity {
    /**
     * @generated from protobuf field: int64 product_variant_id = 1
     */
    productVariantId: bigint;
    /**
     * @generated from protobuf field: int32 quantity = 2
     */
    quantity: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetCartItemsRequest$Type extends MessageType<GetCartItemsRequest> {
    constructor() {
        super("api.common.proto.cartservice.GetCartItemsRequest", []);
    }
    create(value?: PartialMessage<GetCartItemsRequest>): GetCartItemsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetCartItemsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCartItemsRequest): GetCartItemsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCartItemsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.cartservice.GetCartItemsRequest
 */
export const GetCartItemsRequest = new GetCartItemsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCartItemsResponse$Type extends MessageType<GetCartItemsResponse> {
    constructor() {
        super("api.common.proto.cartservice.GetCartItemsResponse", [
            { no: 1, name: "header", kind: "message", T: () => ResponseHeader },
            { no: 2, name: "items_with_quantity", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemWithQuantity }
        ]);
    }
    create(value?: PartialMessage<GetCartItemsResponse>): GetCartItemsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemsWithQuantity = [];
        if (value !== undefined)
            reflectionMergePartial<GetCartItemsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCartItemsResponse): GetCartItemsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.common.proto.ResponseHeader header */ 1:
                    message.header = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* repeated api.common.proto.cartservice.ItemWithQuantity items_with_quantity */ 2:
                    message.itemsWithQuantity.push(ItemWithQuantity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCartItemsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.common.proto.ResponseHeader header = 1; */
        if (message.header)
            ResponseHeader.internalBinaryWrite(message.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated api.common.proto.cartservice.ItemWithQuantity items_with_quantity = 2; */
        for (let i = 0; i < message.itemsWithQuantity.length; i++)
            ItemWithQuantity.internalBinaryWrite(message.itemsWithQuantity[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.cartservice.GetCartItemsResponse
 */
export const GetCartItemsResponse = new GetCartItemsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MutateCartRequest$Type extends MessageType<MutateCartRequest> {
    constructor() {
        super("api.common.proto.cartservice.MutateCartRequest", [
            { no: 1, name: "item", kind: "message", T: () => ItemWithQuantity }
        ]);
    }
    create(value?: PartialMessage<MutateCartRequest>): MutateCartRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MutateCartRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MutateCartRequest): MutateCartRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.common.proto.cartservice.ItemWithQuantity item */ 1:
                    message.item = ItemWithQuantity.internalBinaryRead(reader, reader.uint32(), options, message.item);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MutateCartRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.common.proto.cartservice.ItemWithQuantity item = 1; */
        if (message.item)
            ItemWithQuantity.internalBinaryWrite(message.item, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.cartservice.MutateCartRequest
 */
export const MutateCartRequest = new MutateCartRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MutateCartResponse$Type extends MessageType<MutateCartResponse> {
    constructor() {
        super("api.common.proto.cartservice.MutateCartResponse", [
            { no: 1, name: "header", kind: "message", T: () => ResponseHeader }
        ]);
    }
    create(value?: PartialMessage<MutateCartResponse>): MutateCartResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MutateCartResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MutateCartResponse): MutateCartResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* api.common.proto.ResponseHeader header */ 1:
                    message.header = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MutateCartResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* api.common.proto.ResponseHeader header = 1; */
        if (message.header)
            ResponseHeader.internalBinaryWrite(message.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.cartservice.MutateCartResponse
 */
export const MutateCartResponse = new MutateCartResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemWithQuantity$Type extends MessageType<ItemWithQuantity> {
    constructor() {
        super("api.common.proto.cartservice.ItemWithQuantity", [
            { no: 1, name: "product_variant_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "quantity", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ItemWithQuantity>): ItemWithQuantity {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.productVariantId = 0n;
        message.quantity = 0;
        if (value !== undefined)
            reflectionMergePartial<ItemWithQuantity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemWithQuantity): ItemWithQuantity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 product_variant_id */ 1:
                    message.productVariantId = reader.int64().toBigInt();
                    break;
                case /* int32 quantity */ 2:
                    message.quantity = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemWithQuantity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 product_variant_id = 1; */
        if (message.productVariantId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.productVariantId);
        /* int32 quantity = 2; */
        if (message.quantity !== 0)
            writer.tag(2, WireType.Varint).int32(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.proto.cartservice.ItemWithQuantity
 */
export const ItemWithQuantity = new ItemWithQuantity$Type();
/**
 * @generated ServiceType for protobuf service api.common.proto.cartservice.CartService
 */
export const CartService = new ServiceType("api.common.proto.cartservice.CartService", [
    { name: "GetCartItems", options: {}, I: GetCartItemsRequest, O: GetCartItemsResponse },
    { name: "MutateCart", options: {}, I: MutateCartRequest, O: MutateCartResponse }
]);
