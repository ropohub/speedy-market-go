// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "api/common/enums/codes.proto" (package "api.common.enums", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message api.common.enums.Code
 */
export interface Code {
}
/**
 * The canonical error codes for ROPO APIs.
 *
 * Warnings:
 *
 * -   Do not change any numeric assignments.
 * -   Changes to this list should only be made if there is a compelling
 *     need that can't be satisfied in another way.
 *
 * Sometimes multiple error codes may apply.  Services should return
 * the most specific error code that applies.  For example, prefer
 * OUT_OF_RANGE over FAILED_PRECONDITION if both codes apply.
 * Similarly prefer NOT_FOUND or ALREADY_EXISTS over FAILED_PRECONDITION.
 *
 * For mapping between these codes and HTTP codes, see
 * go/http-canonical-mapping
 *
 * @generated from protobuf enum api.common.enums.Code.Enum
 */
export enum Code_Enum {
    /**
     * Not an error; returned on success.
     *
     * @generated from protobuf enum value: OK = 0;
     */
    OK = 0,
    /**
     * The operation was cancelled, typically by the caller.
     *
     * @generated from protobuf enum value: CANCELLED = 1;
     */
    CANCELLED = 1,
    /**
     * Unknown error.  For example, this error may be returned when
     * a Status value received from another address space belongs to
     * an error-space that is not known in this address space.  Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * @generated from protobuf enum value: UNKNOWN = 2;
     */
    UNKNOWN = 2,
    /**
     * The client specified an invalid argument.  Note that this differs
     * from FAILED_PRECONDITION.  INVALID_ARGUMENT indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * @generated from protobuf enum value: INVALID_ARGUMENT = 3;
     */
    INVALID_ARGUMENT = 3,
    /**
     * The deadline expired before the operation could complete. For operations
     * that change the state of the system, this error may be returned
     * even if the operation has completed successfully.  For example, a
     * successful response from a server could have been delayed long
     * enough for the deadline to expire.
     *
     * @generated from protobuf enum value: DEADLINE_EXCEEDED = 4;
     */
    DEADLINE_EXCEEDED = 4,
    /**
     * Some requested entity (e.g., file or directory) was not found.
     *
     * Note to server developers: if a request is denied for an entire class
     * of users, such as gradual feature rollout or undocumented allowlist,
     * `NOT_FOUND` may be used. If a request is denied for some users within
     * a class of users, such as user-based access control, `PERMISSION_DENIED`
     * must be used.
     *
     * @generated from protobuf enum value: NOT_FOUND = 5;
     */
    NOT_FOUND = 5,
    /**
     * The entity that a client attempted to create (e.g., file or directory)
     * already exists.
     *
     * @generated from protobuf enum value: ALREADY_EXISTS = 6;
     */
    ALREADY_EXISTS = 6,
    /**
     * The caller does not have permission to execute the specified
     * operation. `PERMISSION_DENIED` must not be used for rejections
     * caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
     * instead for those errors). `PERMISSION_DENIED` must not be
     * used if the caller can not be identified (use `UNAUTHENTICATED`
     * instead for those errors). This error code does not imply the
     * request is valid or the requested entity exists or satisfies
     * other pre-conditions.
     *
     * @generated from protobuf enum value: PERMISSION_DENIED = 7;
     */
    PERMISSION_DENIED = 7,
    /**
     * The request does not have valid authentication credentials for the
     * operation.
     *
     * @generated from protobuf enum value: UNAUTHENTICATED = 16;
     */
    UNAUTHENTICATED = 16,
    /**
     * Some resource has been exhausted, perhaps a per-user quota, or
     * perhaps the entire file system is out of space.
     *
     * @generated from protobuf enum value: RESOURCE_EXHAUSTED = 8;
     */
    RESOURCE_EXHAUSTED = 8,
    /**
     * The operation was rejected because the system is not in a state
     * required for the operation's execution.  For example, the directory
     * to be deleted is non-empty, an rmdir operation is applied to
     * a non-directory, etc.
     *
     * A litmus test that may help a service implementer in deciding
     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
     *  (a) Use UNAVAILABLE if the client can retry just the failing call.
     *  (b) Use ABORTED if the client should retry at a higher-level. For
     *      example, when a client-specified test-and-set fails, indicating the
     *      client should restart a read-modify-write sequence.
     *  (c) Use FAILED_PRECONDITION if the client should not retry until
     *      the system state has been explicitly fixed. For example, if an
     *      "rmdir" fails because the directory is non-empty,
     *      FAILED_PRECONDITION should be returned since the client should not
     *      retry unless the files are deleted from the directory.
     *
     * @generated from protobuf enum value: FAILED_PRECONDITION = 9;
     */
    FAILED_PRECONDITION = 9,
    /**
     * The operation was aborted, typically due to a concurrency issue such as
     * a sequencer check failure or transaction abort.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION,
     * ABORTED, and UNAVAILABLE.
     *
     * @generated from protobuf enum value: ABORTED = 10;
     */
    ABORTED = 10,
    /**
     * The operation was attempted past the valid range.  E.g., seeking or
     * reading past end-of-file.
     *
     * Unlike INVALID_ARGUMENT, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate INVALID_ARGUMENT if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OUT_OF_RANGE if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FAILED_PRECONDITION and
     * OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OUT_OF_RANGE error to detect when
     * they are done.
     *
     * @generated from protobuf enum value: OUT_OF_RANGE = 11;
     */
    OUT_OF_RANGE = 11,
    /**
     * The operation is not implemented or is not supported/enabled in this
     * service.
     *
     * @generated from protobuf enum value: UNIMPLEMENTED = 12;
     */
    UNIMPLEMENTED = 12,
    /**
     * Internal errors.  This means that some invariants expected by the
     * underlying system have been broken.  This error code is reserved
     * for serious errors.
     *
     * @generated from protobuf enum value: INTERNAL = 13;
     */
    INTERNAL = 13,
    /**
     * The service is currently unavailable.  This is most likely a
     * transient condition, which can be corrected by retrying with
     * a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION,
     * ABORTED, and UNAVAILABLE.
     *
     * @generated from protobuf enum value: UNAVAILABLE = 14;
     */
    UNAVAILABLE = 14,
    /**
     * Unrecoverable data loss or corruption.
     *
     * @generated from protobuf enum value: DATA_LOSS = 15;
     */
    DATA_LOSS = 15,
    /**
     * An extra enum entry to prevent people from writing code that
     * fails to compile when a new code is added.
     *
     * Nobody should ever reference this enumeration entry. In particular,
     * if you write C++ code that switches on this enumeration, add a default:
     * case instead of a case that mentions this enumeration entry.
     *
     * Nobody should rely on the value (currently 20) listed here.  It
     * may change in the future.
     *
     * @generated from protobuf enum value: DO_NOT_USE_RESERVED_FOR_FUTURE_EXPANSION_USE_DEFAULT_IN_SWITCH_INSTEAD_ = 20;
     */
    DO_NOT_USE_RESERVED_FOR_FUTURE_EXPANSION_USE_DEFAULT_IN_SWITCH_INSTEAD_ = 20
}
// @generated message type with reflection information, may provide speed optimized methods
class Code$Type extends MessageType<Code> {
    constructor() {
        super("api.common.enums.Code", []);
    }
    create(value?: PartialMessage<Code>): Code {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Code>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Code): Code {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Code, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.common.enums.Code
 */
export const Code = new Code$Type();
